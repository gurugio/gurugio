1부:개발환경
2부:APR소스이해
3부:C언어에서 하기쉬운 코딩 실수 유형



1부. C언어를 위한 개발 환경 꾸미기

ch01. 	리눅스에서 개발 환경 구성하기
ch01.1 bash를 이용하여 여러가지 플랫폼에서 공통적으로 사용할 수 있는 사용자 환경 구성하기
ch01.2 emacs를 사용하기 위한 기본 환경 설정하기
ch01.3 개발에 필요한 emacs의 라이브러리 소개
ch01.4 개발에 필요한 emacs의 라이브러리 활용 예

ch02.   make를 이용하여 빌드 시스템 구축하기
ch02.1 기본 디렉토리 구조
ch02.2 autoconf를 이용하여 플랫폼 정보를 알아내는 configure 만들기
ch02.3 가장 기초적인 Makefile 예제
ch02.4 make가 제공하는 매크로를 사용하는 Makefile 예제
ch02.5 템플릿을 활용하여 대규모 프로젝트의 빌드를 관리하는 방법
ch02.6 배포용 패키지를 만드는 방법
ch02.7 cmake 기본 사용법



2부. 플랫폼 독립적인 제품 개발을 위한 포팅 라이브러리 개발

내가 만든 예제 소스가 아니라. APR 프로젝트에 있는 소스를 예제로 설명할 것

목차


2부 목차
- C프로그래밍 노하우를 기르기위한 라이브러리 개발의 필요성
- 좋은 라이브러리가 되기위한 인터페이스 설계
- 데이터와 코드를 구분하는 프로그래밍
- 프레임웍과 플러그인을 분리하는 프로그래밍
- 함수 내부에서 에러를 처리하는 방법과 플랫폼 공통적인 에러값 정의
- C언어로 객체를 흉내내기
- C언어로 C++의 string 객체 만들기
- 언어와 인코딩에맞게 사용자 메세지 관리
- 유닛테스트 개발
- 외부 툴을 사용하지 않고 간단하게 메모리 릭을 찾아내는 방법
- 코딩 규칙을 만들고 자동화된 툴로 검사하는 방법


챕터별 중심 내용

+ C프로그래밍 노하우를 기르기위한 라이브러리 개발의 필요성
  2- 왜: C에 부족한 라이브러리 문제를 각자 해결,바퀴의 재발명하고 있는 문제가 있음, 플랫폼마다 API가 조금씩 다른 문제를 늘 따로 해결해야함
  3 - APR은 다양한 기능을 제공하고 있음. 무슨 기능 무슨 기능...
  3 - 플랫폼 독립적으로 공통으로 사용할 수 있도록 플롯폼별로 맞게 구현
등등..
  2. 왜: 라이브러리는 사용자에게 배포하는 프로그램이므로, 다양한 에러처리와 플랫폼 변화, 사용 환경 고려 (멀티쓰레드인지 멀티프로세스인지 등), 등등 고려할게 많으므로 다양한 기술이 필요함
  2- 어떻게: Apache HTTP server나 subversion에서는 APR을 사용하고 있음
  3- Apache HTTP server, subversion에서 사용중
  3- 특징 설명
  2- 어떻게: QT는 유명한 멀티플랫폼 라이브러리임
  3- QT의 특징, 사용하는 프로젝트 등
  따라서: C 개발의 노하우를 배우기 위해 라이브러리를 만들어보는 실습을 해보자.

+ 좋은 라이브러리가 되기위한 인터페이스 설계
  http://kldp.org/node/114200 플랫폼 공통적인 변수를 위해 사용할것
  http://kldp.org/node/112590
  메모리 할당을 함수 안에서 해야하나 사용자가 직접 해야하나, 두 경우의
  장단점 및 예제 (라이브러리 관점에서 더 좋은것은? 속도면에서 더 좋은것은?) http://kldp.org/node/113611
  함수 내부에서 데이터를 만들어서 외부로 반환하는 경우 인터페이스를 init_something/final_someting의 pair로 구현
  get_list_node/put_list_node 가 좋은가 init_list_node/final_list_node 가 좋은가?
  라이브러리가 제공하는 데이터 구조가 가변적인 크기를 가진 경우에는 get 인터페이스만 사용가능함(맞나?) (구조체안에 char *name 필드가 있을때 등)
  예) 파일 path, 스핀락, 쓰레드 등등" 
  http://svn.apache.org/viewvc/apr/apr/trunk/docs/pool-design.html?view=co 참조
  데이터 얻기/해지 페어로 함수 작성 (init-final 이 좋은가 get-put 이 좋은가?)
  http://gurugio.blogspot.com/2010/05/blog-post.html
  http://gurugio.blogspot.com/2010/03/api.html

+ 데이터와 코드를 구분하는 프로그래밍
  http://gurugio.blogspot.com/2010/05/data-driven-design.html
  예제를 뭘로 할지 결정해야함 

+ 프레임웍과 플러그인을 분리하는 프로그래밍
  프레임웍은 디스크립터의 템플릿을 제공하고 플러그인은 디스크립터를 생성해서 프레임웍으로 전달
  프레임웍은 디스크립터를 확인하여 플러그인을 실행함
  actPerf
  http://gurugio.blogspot.com/2010/05/blog-post_14.html
  리눅스 커널의 register_chrdev에서 장치 파일의 디스크립터 struct char_device_struct 데이터 생성 및 관리 방법과 struct file_operations 을 전달하는 의미 -> 예제

+ 함수 내부에서 에러를 처리하는 방법과 플랫폼 공통적인 에러값 정의
  http://library.gnome.org/devel/glib/stable/glib-Error-Reporting.html 참고할만한가?
  함수 실패시 점프해서 경우마다 다른 에러처리 루틴을 만들기 (ACP_TEST_RAISE 등)
  에러 처리 루틴을 함수 끝에 모아놓으면 함수의 가독성이 좋아짐
  시스템의 에러 값과 제품의 고유한 에러 값 정의 및 에러 검출 루틴 (acpErrorString)
  쓰레드별 변수를 만들어서 에러가 발생했을 때 에러가 발생한 파일이름/라인번호 등을 저장하기
  linux-kernel-2.6.24의 fs/char_dev.c 파일 중, 최신 커널 소스는 다음과 같이 에러 처리 루틴을 함수 끝부분에 모아놓음 -> 예제

+ C언어로 객체를 흉내내기
  gtk에서 어떻게 하는지, 리눅스 커널에서는 어떻게 하는지 조사. gtk는 객체 흉내를 잘 낸 소스라고함
  동일한 기능의 모듈을 상황에 따라 골라서 사용하기
  동일하거나 유사한 데이터구조인데 약간씩 속성이 다른 경우 각각의 인스턴스를 만들어서 사용하기
  링크드 리스트에서 속성에 따라 더블,서클,락프리 등의 종류별 인스턴스 얻기

+ C언어로 C++의 string 객체 만들기
  구조체안에 문자열 길이,버퍼 포인터, 버퍼 크기 등의 정보 기록
  동적 선언,정적 선언, 초기화 등의 매크로 작성
  acpStr

+ 언어와 인코딩에맞게 사용자 메세지 관리
  언어별,character-set별로 에러 메세지 관리
  메세지 테이블 만드는 방법
  에러 레벨 관리
  로그나 에러 처리 루틴에서 활용하는 예제
  ace

+ 쓰레드별로 에러 번호 관리하기
  TLS만들어서 에러 번호 저장하고 쓰레드별로 에러 번호 확인하는 방법
  쓰레드 여러개 만들어서 각 쓰레드별로 다른 에러 값 반환한 후,
  쓰레드별로 에러 번호 확인해보는 예제 작성
  
+ 유닛테스트 개발
  무엇을, 어떻게 테스트해야하나
  유닛 테스트에 필요한 매크로/라이브러리 (콜스택 출력)
  테스트 파일을 직접 실행하는게 아니라 utilUGuard를 만들어서 에러 발생시 에러가 발생한 지점과 상황을 알려주기 (콜스택 출력 이용)
  네트워크로 소스를 동기화해서 여러 플랫폼에서 동시에 빌드하고 테스트해서 결과를 모으기
  actTest,utilUGuard

+ 외부 툴을 사용하지 않고 간단하게 메모리 릭을 찾아내는 방법
  http://gurugio.blogspot.com/2010/03/refer-defensive-programming-for-red-hat.html
  이중에서 몇가지 예제 만들기
  efence, duma 조사 - 해당되는 것들인가? 

+ 코딩 규칙을 만들고 자동화된 툴로 검사하는 방법
  함수,변수종류,매크로 등의 naming prefix 규칙
  소스 코드 검사 툴 사용하기
  Makefile 에서 실행하도록 적용하기





3부. C언어에서 하기쉬운 코딩 실수


코드소나로 검출된 버그를 찾아서 유형 분석 -> 실수하기 쉬운 코드 형태나 자주하는 실수, 이렇게해야한다 등등 -- 중요!!

유형이 많지 않으면 유형별로 나눠서 한 챕터씩 만들기 
전체 내용이 너무 적으면 모두 한 챕터로 합치고 작은 챕터로 나누기

