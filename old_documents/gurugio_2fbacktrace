= 스택의 구조 =

{{{

#include <stdio.h>

void bar(int c)
{
        int d;
        printf("bar: add(c) = %p\n", &c);
        printf("bar: add(d) = %p\n", &d);
        d = c;
        printf("d is %d\n", d);
}

void foo(int a, int b)
{
        int c;
        printf("foo: add(a) = %p\n", &a);
        printf("foo: add(b) = %p\n", &b);
        printf("foo: add(c) = %p\n", &c);
        c = a+b;
        printf("c is %d\n", c);
        bar(c);
}

int main(int argc, char **argv)
{
        int a,b;

        printf("main: add(argc) = %p\n", &argc);
        printf("main: add(argv) = %p\n", &argv);
        printf("main: add(a) = %p\n", &a);
        printf("main: add(b) = %p\n", &b);
        a = 1;
        b = 2;
        foo(a,b);


        return 0;
}
}}}

{{{

d44	argv		
d40	argc		
d3c			
d38			
d34			
d30			
……			
d1c	main-a	main의 지역 변수
d18	main-b	main의 지역 변수
d14			
d10			
d08			
d04	foo-b	main이 스택에 넣은 인자 a
d00	foo-a	main이 스택에 넣은 인자 b
cfc		foo의 스택	foor가 끝나고 돌아갈 주소
cf8		ebp 백업
cf4	foo-c	foor의 지역 변수
cf0			
cec			
ce8			
ce4			
ce0	bar-c	foo가 스택에 넣은 c
cdc		bar의 스택	bar가 끝나고 돌아갈 주소
cd8		ebp 백업
cd4	bar-d	bar의 지역 변수

gurugio@gurugio-linux:~/study/stack_frame$ gcc -g -O a.c
gurugio@gurugio-linux:~/study/stack_frame$ gdb a.out
GNU gdb 6.6-debian
Copyright (C) 2006 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "i486-linux-gnu"...
Using host libthread_db library "/lib/tls/i686/cmov/libthread_db.so.1".
(gdb) b bar
Breakpoint 1 at 0x804837a: file a.c, line 6.
(gdb) r
Starting program: /home/gurugio/study/stack_frame/a.out
main: add(argc) = 0xbfb87d40
main: add(argv) = 0xbfb87d44
main: add(a) = 0xbfb87d1c
main: add(b) = 0xbfb87d18
foo: add(a) = 0xbfb87d00
foo: add(b) = 0xbfb87d04
foo: add(c) = 0xbfb87cf4
c is 3

Breakpoint 1, bar (c=3) at a.c:6
6               printf("bar: add(c) = %p\n", &c);
(gdb) n
bar: add(c) = 0xbfb87ce0
7               printf("bar: add(d) = %p\n", &d);
(gdb) n
bar: add(d) = 0xbfb87cd4
8               d = c;
(gdb) n
9               printf("d is %d\n", d);
(gdb) n
d is 3
10      }

(gdb) info frame bar 함수에서의 스택 프레임 출력
Stack level 0, frame at 0xbfb87ce0: bar의 스택 프레임이 <ce0> 이전에 끝남
 eip = 0x80483b6 in bar (a.c:10); saved eip 0x804841b foo를 디스어셈블하면 bar() 호출 다음 명령의 주소
 called by frame at 0xbfb87d00 bar()를 호출한 foo()의 스택 프레임이 <d00>에서 끝남
 source language c.
 Arglist at 0xbfb87cd8, args: c=3 <cd8>은 ebp레지스터의 값이다. Ebp레지스터가 가르키는 주소가 함수 인자의 기준이 된다.
 Locals at 0xbfb87cd8, Previous frame's sp is 0xbfb87ce0 bar() 함수 호출 이전의 스택 프레임 값
 Saved registers:
  ebp at 0xbfb87cd8, eip at 0xbfb87cdc ebp와 eip 값이 보존된 위치

(gdb) info frame
Stack level 1, frame at 0xbfb87d00:
 eip = 0x804841b in foo (a.c:20); saved eip 0x804849c
 called by frame at 0xbfb87d30, caller of frame at 0xbfb87ce0
 source language c.
 Arglist at 0xbfb87cf8, args: a=1, b=2
 Locals at 0xbfb87cf8, Previous frame's sp is 0xbfb87d00
 Saved registers:
  ebp at 0xbfb87cf8, eip at 0xbfb87cfc

(gdb) info frame
Stack level 2, frame at 0xbfb87d30:
 eip = 0x804849c in main (a.c:33); saved eip 0xb7e21050
 caller of frame at 0xbfb87d00
 source language c.
 Arglist at 0xbfb87d28, args: argc=1, argv=0xbfb87dc4
 Locals at 0xbfb87d28, Previous frame's sp at 0xbfb87d20
 Saved registers:
  ebx at 0xbfb87d24, ebp at 0xbfb87d28, eip at 0xbfb87d2c
}}}

= libdl 사용법 =

{{{

#define _GNU_SOURCE

#include <stdio.h>
#include <dlfcn.h>

void **getEBP(int dummy)
{
        void **ebp = (void **)&dummy-2;
        return ebp;
}

void print_walk_backtrace(void)
{
        int dummy;
        int frame = 0;
        Dl_info dlip;
        void **ebp = getEBP(dummy);
        void **ret = NULL;

        printf("Stack backtrace:\n");

        while (*ebp) {
                ret = ebp+1;

                if (dladdr(*ret, &dlip) == 0)
                        break;

                printf("Frame %d: [ebp=%8p] [ret=%8p] %s\n", frame++, *ebp, *ret, dlip.dli_sname);
                ebp = (void **)(*ebp);
        }
}


int foo(void)
{
        print_walk_backtrace();
        return 0;
}

int bar(void)
{
        foo();
        return 0;
}

int boo(void)
{
        bar();
        return 0;
}

int baz(void)
{
        boo();
        return 0;
}

int main(void)
{
        baz();

        printf("baz->%p, boo->%p, bar->%p, foo->%p\n", baz, boo, bar, foo);
        return 0;
}

}}}

{{{
gurugio@gurugio-linux:~/study/stack_frame$ ./bt
Stack backtrace:
Frame 0: [ebp=0xbfb98d18] [ret=0x8048756] print_walk_backtrace
Frame 1: [ebp=0xbfb98d28] [ret=0x80487ac] foo
Frame 2: [ebp=0xbfb98d38] [ret=0x80487be] bar
Frame 3: [ebp=0xbfb98d48] [ret=0x80487d0] boo
Frame 4: [ebp=0xbfb98d58] [ret=0x80487e2] baz
Frame 5: [ebp=0xbfb98d78] [ret=0x80487ff] main
Frame 6: [ebp=0xbfb98de8] [ret=0xb7dab050] __libc_start_main
baz->0x80487d7, boo->0x80487c5, bar->0x80487b3, foo->0x80487a1
}}}
