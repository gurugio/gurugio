1st edition, 7 Jan, 2002

''Gi-Oh Kim, www.asmlove.co.kr''

[[TableOfContents]]

= Coding Style = 

== about this document ==
이 문서는 코딩을 잘하는 방법에 대한 제 생각을 모아본 것입니다. 어셈블리 코딩을 주로 하다보니 모듈성과 재사용성을 조금이라도 더 신경써서 라이브러리 함수들을 만들어야했고 그 훈련을 통해 함수간의 인터페이스와 함수의 모듈화에 대해 신경쓰게 되었습니다. 그래서 나름대로 코딩 컨벤션을 정리해야 할 필요성을 느껴서 몇가지를 정해서 쓰다가 이렇게 정리하게됬습니다.

 * 주로 Practical Unix Programming 이라는 책을 참조했습니다.
 * FreeBSD 문서들을 보면 FreeBSD 소스의 코딩 규약에 관한 내용의 문서들이 있습니다. 그 문서들에 코딩 자체에 대한 설명이 많습니다.

== Writing a function ==
함수를 작성할때 고려해야 할 사항들입니다.

 * 꼭 리턴 값을 사용해서 다른 함수들과 통신할 수 있게 하고 함수를 호출한 뒤 에러를 추적할 수 있게 한다.

 * 함수에서 바로 종료하지 않는다. 대신에 에러 상황에 따라 다양한 값을 반환해서 어떤 에러가 발생했는지를 추적하기 쉽게 한다. 최종적으로 그 함수를 호출한 함수에서 에러 처리를 하게 된다.

 * 범용성과 유용성을 동시에 생각한다. 목적에 맞게 만들다보면 범용성이 떨어지고 범용성에 맞게 만들면 목적에 꼭 맞지 않는 경우가 생기는데 둘다 고려해야 한다.

 * 버퍼의 크기에 대해 임의로 가정하지 않는다. 실제로 이렇게 하기는 힘들지만 버퍼의 넘침에 대해서는 꼭 주의해야 하고 스트링의 길이는 항상 주시해야 한다. 버퍼에 대한 공격은 아직도 최고의 공격수단이다.

 * 한계값을 사용할때는 시스템에 정의된 값을 사용해야지 임의로 상수를 사용해서는 안된다. 항상 limits.h를 사용하자.

 * 바퀴를 다시 발명할 필요는 없다. 이미 만들어진 표준 라이브러리는 아주 뛰어난 성능을 가지고 있고 최적화된 상태이므로 다시 만들지 말고 최대한 활용한다.

 * 가능하면 함수 인자를 변수로 사용하지 말고 const 로 선언해서 쓴다. 함수 인자가 원본 데이터를 기억하고 있어야 하는 경우가 많기 때문이다. 포인터를 사용할때는 특히 주의한다. 포인터를 변경함으로서 데이터가 손상될 수도 있기 때문이다.

 * 정적 변수나 동적 메모리 할당보다는 지역변수를 활용하자. 메모리가 넘치거나 모자른게 얼마나 골치아픈지는 디버깅을 해보면 알수 있다. 죽음이다. >.<

 * 할당된 메모리는 항상 해제해야 한다. 많은 데이터를 사용하다보면 빼먹는 경우가 있다.

 * 함수가 재귀 호출을 하는지 시그널로 호출되는지 쓰레드에서 호출하는지 명확히 구분한다. 재진입 함수는 스스로 자신을 수정해서는 안된다. 그래야 동시에 여러번 이상없이 호출될 수 있다. 반대로 정적 지역번수를 쓰거나 전역 변수를 쓰는 함수는 재진입이 될 수 없고 재귀 호출을 할 때에 변수들이 이상없는지 잘 감시해야 한다. 여기서 errno 가 문제될 수 있다. 에러를 추적하지 못할 수도 있기 때문이다. 꼭 주의한다.

 * 시그널에 의한 인터럽트가 어떤 결과를 가져올지 충분히 계산해야 한다. 중간에 멈춰진 연산들과 해당 변수들이 어떤 위험을 가지고 있는지 쉽게 알 수 있다.

 * 전체 프로그램이 어떻게 종료될지 충분히 검토한다. 어떤 상황에서 왜 종료되고 어떤 마무리를 해야 하는지 미리 생각한다.

 * 전체 함수들과 모듈간의 데이터의 이동과 통신을 미리 구상하고 전체적인 흐름을 설계해야한다.

== Coding convectioin == 
변수와 함수의 이름을 정하는 것과 주석에 무엇을 써야 할지 아주 민감한 부분인 것 같습니다. 어떤 언어든지 문법을 익힌 후에 코딩을 연습할 때 바른 습관을 들여야 좀더 편할 것 같습니다. 특히 자주 깜빡하고 저번주에 코딩한 소스인데도 전혀 기억을 못하고 머리를 쥐어뜯는 저같은 사람들은 주석이 매우매우 중요하답니다. ;-) 

 * 헤더 부분 : 파일마다 이 파일에 대한 정보와 프로젝트 작업에 대한 기록을 남깁니다. 
  * 프로젝트 이름 : 
  * 프로젝트 설명 : 
  * 파일 이름 : 
  * 작성자 : 
  * 기타 주의사항 : 
  * 작업 일자/작업 내용 : 

 * 헤더 파일의 내용/기록 순서 
  * #includes 
  * #defines 
  * #typedefs 
  * #globals 
  * #forward functions declaration 


 * 서브루틴 주석 : 함수마다 설명을 써야겠지요. 사용하는 전역변수와 인자에 대한 설명은 아주 중요합니다. 또 에러값 마다 어떤 에러인지 기록하면 편합니다. 
  * Name :함수의 이름 
  * Synopsis :함수에대한 설명 
  * Externam Effects : 사용하는 전역변수 
  * Parameters : 함수 인자와 설명 
  * returns : 정상적인 반환값 
  * errno : 에러 상황에 따른 반환값 

 * 기타 주석에 대한 주의사항 
  * 주석의 내용으로는 '왜' '무엇을' '어떤 식으로'를 적고 필요한 경우에는 긴 수식이나 뭐든지 동원가능한 설명은 다 적어놓는다. 특별한 경우를 제외하고는 소스만으로 모든 설명이 가능해야 하는 것이 원칙이다.

  * 주석은 이 소스를 처음보는 사람을 위해 적는다는 생각을 해야 한다. 며칠 지나면 본인이 그런 상태가 되니까. ;-)

  * 함수 성공시 0, 에러에는 음수를 반환한다. 각 에러경우마다 반환값을 하나씩 할당한다. 

  * 포인터를 반환할때의 에러는 0이 아닌 NULL이다.

  * {}와 if-else, while, switch-case등은 한줄을 사용한다. 

  * if-else, while, switch-case등과 괄호는 한칸 띄우고 함수, 매크로, sizeof는 괄호와 붙여쓴다. 

  * 코드 수정시는 수정 내용을 날짜와 내용으로 주석을 붙인다. 수정한 코드도 주석으로 남긴다.

  * nesting이 복잡한 경우에는 }에 주석을 붙인다. 

  * typedef struct, typedef union, typedef enum, #define 로 정의되는 변수는 대문자로 쓴다. 

  * 여러개의 파일에서 참조되는 경우 정의된 파일의 이름을 앞에 붙여준다. 

  * 하나 이상의 파일에서 공유되는 전역변수는 extern_를 붙여쓴다. 

  * 하나의 파일에서만 사용되는 전역변수는 gl_를 붙인다. 

  * 하나의 파일에서만 사용되는 전역변수 및 함수 선언에는 static를 붙인다. 

== References ==
 * Practical Unix Programming. Kay A Robbins, Steve Robbins, Steven Robbins
 * Linux Kernel Coding Style http://www.purists.org/linux/
 * FreeBSD Kernel Developer's manual : man style 
