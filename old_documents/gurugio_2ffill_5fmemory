1st edition, 19 Sep, 2006

''Gi-Oh Kim, www.asmlove.co.kr''

[[TableOfContents]]

= How to access memory fast (Burst Mode of SDRAM) = 

== Introduction ==

오늘 Qt를 이용해서 이미지를 출력하는 프로그램을 짜는데 이상하게 너무 느렸습니다. 초당 30 프레임 이상 출력할 수 있어야 하는데 이미지의 각 픽셀 값들을 수정하는 코드가 너무 느려서 전체 프로그램의 성능이 떨어지는 것을 발견했습니다. 그래서 이상하게 생각하고 있었는데 예전에 제가 연습삼아서 작성했던 프레임 버퍼 제어 코드를 보고서야 이유를 알 수 있었습니다. 메모리 버퍼에 값을 쓸 때 메모리를 순차적으로 접근하지 않고 중구난방으로 접근해서 최적화가 되지 않았던 것이었습니다. 그래서 다시는 깜박하지 않기 위해 이렇게 문서로 남깁니다. 혹시 크기가 큰 메모리를 사용하는 프로그램의 성능을 높이고자 하시는 분들도 간혹 이런 문제에서 실수하시는 경우가 있으므로 상식선에서 읽어두시면 좋을 것 같습니다.

== Memory Access ==

이미지를 출력하기 위해서 640X480 크기의 버퍼를 잡았습니다. 그러면 다음과 같이 메모리가 할당됩니다.

(0,0) (0,1) (0,2) (0,3) ... (0,639)
(1,0) (1,1) ...
...
(479,0) .....................(639, 479)

그러면 이 메모리에 값을 쓰기 위해서는 다음 중 어떤 순서로 값을 써야 할까요?
단, 메모리는 순차적으로 그러니까 0 번지를 쓴 다음에는 1번지 그 다음은 2번지... 이렇게 순서대로 접근하는게 가장 빠르다는 것을 미리 말씀드립니다. 그 이유는 잠시 후에 다시 말씀드리겠습니다.

1번  (0,0) (1,0) (2,0) ... (479,0) (0,1) (1, 1), (2,1) ... 이렇게 한 열을 쓰고 그 다음 열을 쓴다.

2번 (0,0) (0,1), (0,2) ... 이렇게 한 행을 쓰고 그 다음 행을 쓴다.

3번 1번과 2번이 동일한다.

답을 2번입니다. 문제에서 말씀드렸 듯이 메모리는 순차적으로 접근하는게 빠릅니다. [640][480]으로 배열을 잡고 이 배열에 순차적으로 접근하기 위해서는 2번이 맞습니다.
C 문법에서 포인터를 배울 때의 공식을 다시 한번 상기해보면 다음과 같습니다.

buffer[i][j] = buffer + (640*i) + j

i 와 j 중 어느것이 순차적으로 증가할 때 메모리에 순차적으로 접근하게 되는지 알 수 있습니다. i에 0, 1, 2... 를 대입하면 j 가 무슨 값이든지 메모리를 순서대로 접근하는게 아니라 띄엄띄엄 접근하는 것을 알 수 있습니다. j가 먼저 순차적으로 접근해야지요. 한번 해볼까요? (3,4)와 (4,4)를 계산해보겠습니다.

buffer[3][4] = buffer + (640*3) + 4
buffer[4][4] = buffer + (640*4) + 4

확실히 i, 즉 행의 인덱스가 증가하면 640 만큼 메모리를 건너뛰게 됩니다. (3,4)와 (3,5)를 계산해보면,

buffer[3][4] = buffer + (640*3) + 4
buffer[3][5] = buffer + (640*3) + 5

이 됩니다. 메모리 주소가 1이 증가되서 결국 순차적으로 증가하는 것을 알 수 있습니다.

이제 열의 인덱스를 먼저 증가시켜야 하고 마지막 열까지 증가하면 다음에는 행을 하나 증가시켜야 한다는 것을 알았습니다.

== Example Code ==

이제 예제 코드를 보면서 살펴보겠습니다.

{{{#!vim c
      1 #include <sys/time.h>
      2 #include <time.h>
      3 #include <stdio.h>
      4 
      5 int buffer[640][480];
      6 
      7 
      8 int main(void)
      9 {
     10   int x, y;
     11   struct timeval st, et;
     12   int count = 0;
     13 
     14   gettimeofday(&st, NULL);
     15 
     16   for (x = 0; x < 640; x++) {
     17     for (y = 0; y < 480; y++) {
     18       buffer[x][y] = count;
     19       count++;
     20     }
     21   }
     22 
     23   gettimeofday(&et, NULL);
     24 
     25 
     26   printf("Inner loop for column = %d\n", et.tv_usec - st.tv_usec);
     27 
     28   gettimeofday(&st, NULL);
     29 
     30   for (y = 0; y < 480; y++) {
     31     for (x = 0; x < 640; x++) {
     32       buffer[x][y] = count;
     33       count++;
     34     }
     35   }
     36 
     37   gettimeofday(&et, NULL);
     38 
     39 
     40   printf("Inner loop for row = %d\n", et.tv_usec - st.tv_usec);
     41 
     42 
     43 }
     44 
}}}

먼저 출력되는 시간이 열을 먼저 증가시키고 다음에 행을 증가시키는 루프입니다. 그 다음에 출력되는 시간이 행을 증가시키고 다음에 열을 증가시키는 루프입니다. 제 데스크탑에서 실행되는 결과를 보시겠습니다.

{{{
root@gioserver: memory_test# gcc mem.c 
root@gioserver: memory_test# ./a.out
Inner loop for column = 2564
Inner loop for row = 3396
root@gioserver: memory_test# ./a.out
Inner loop for column = 2499
Inner loop for row = 3541
root@gioserver: memory_test# ./a.out
Inner loop for column = 2390
Inner loop for row = 3338
root@gioserver: memory_test# 
}}}

최적화 옵션을 주지 않고 컴파일했습니다. 실행 파일을 3번 실행했는데 3번 모두 열을 먼저 증가시키는 루프가 30% 정도 더 빠른 것으로 나타났습니다.
이걸 제가 만든 PXA270 보드에서 실행해보겠습니다. 두가지 버전으로 컴파일 하겠습니다. fill_no_opti 파일은 최적화 옵션을 주지 않은 것이고 fill_opti는 -O2 최적화 옵션을 주어서 컴파일 한 것입니다.

{{{
[root@Linux /]#./fill_no_opti 
Inner loop for column = 52642
Inner loop for row    = 231572
[root@Linux /]#./fill_no_opti 
Inner loop for column = 52613
Inner loop for row    = 230983
[root@Linux /]#./fill_opti 
Inner loop for column = 40904
Inner loop for row    = 220587
[root@Linux /]#./fill_opti 
Inner loop for column = 40999
Inner loop for row    = 220539
[root@Linux /]#
}}}

최적화를 해주어도 역시 순차적으로 메모리에 접근하는 루프가 더 빠릅니다. 거의 5배가 더 빠르네요. 

== Framebuffer Code ==

이제 프레임 버퍼에 이미지를 출력하는게 왜 버벅거렸는지 아시겠지요?
만약 제가 픽셀값을 쓰는 루프를 잘못 만들어서 이미지를 만드는데 위의 결과에서처럼 약 200msec가 걸렸다면 초당 5장의 이미지를 출력하게 됩니다. 루프만 잘 만들어서 이미지 생성에40msec가 걸리게 하면 초당 25장의 이미지를 출력할 수 있는데 말이지요.

그럼 잘못 만든 코드와 제대로 만든 코드를 보여드리겠습니다.

잘못 만든 코드입니다.


{{{#!vim c
    1 #include <stdio.h>
      2 #include <stdlib.h>
      3 #include <unistd.h>
      4 #include <fcntl.h> 
      5 #include <sys/ioctl.h>
      6 #include <sys/types.h>
      7 #include <linux/fb.h>
      8 #include <sys/mman.h>
      9 
     10 #include <sys/time.h>
     11 #include <time.h>
     12   
     13 #define COLS 640
     14 #define ROWS 480 
     15   
     16   
     17   
     18 unsigned short makepixel(unsigned char r, unsigned char g, unsigned char b)
     19 { 
     20   return (unsigned short)( ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3) );
     21 }
     22   
     23 
     24 int main(void)
     25 {   
     26   int fd;
     27   int status;
     28   struct fb_var_screeninfo fbvar;
     29   struct fb_fix_screeninfo fbfix;
     30   unsigned short pixel;
     31   unsigned short *fb;
     32   int i,j, k;
     33   int offset;
     34     
     35   struct timeval st, et;
     36  
     37   
     38   fd = open("/dev/fb", O_RDWR);
     39   
     40   if (fd < 0) {
     41     perror("error to open device file\n");
     42     return 1;
     43   }
     44 
     45   status = ioctl(fd, FBIOGET_VSCREENINFO, &fbvar);
     46   
     47   if (status < 0) {
     48     perror("error to ioctl(FBIOGET_VSCREENINFO)\n");
     49     close(fd);
     50     return 1;
     51   }
     52 
     53   status = ioctl(fd, FBIOGET_FSCREENINFO, &fbfix);
     54 
     55   if (status < 0) {
     56     printf("error to ioctl(FBIOGET_FSCREENINFO)\n");
     57     close(fd);
     58     return 1;
     59   }
     60 
     61 
     62   printf("x-resolution : %d\n", fbvar.xres);
     63   printf("y-resolution : %d\n", fbvar.yres);
     64   printf("x-resolution(virtual) : %d\n", fbvar.xres_virtual);
     65   printf("y-resolution(virtual) : %d\n", fbvar.yres_virtual);
     66   printf("bpp : %d\n", fbvar.bits_per_pixel);
     67   printf("length of frame buffer memory : %d\n", fbfix.smem_len);
     68 
     69 
     70   fb = (unsigned short *)mmap(0, COLS*ROWS*2, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
     71 
     72   if ((unsigned int)fb == (unsigned int)-1) {
     73     perror("mmap() failed\n");
     74     goto TERMINATED;
     75   }
     76 
     77 
     78   gettimeofday(&st, NULL);
     79 
     80   printf("start : %d.%d\n", st.tv_sec, st.tv_usec);
     81 
     82 
     83   for (k = 0; k < 256; k++) {
     84 
     85     pixel = makepixel(k, k, k);
     86 
     94     for (i = 0; i < 640; i++) {
     95       for (j = 0; j < 480; j++) {
     96         *(fb + j*640 + i) = pixel;
     97       }
     98     }
     99   
    100   }
    101   
    102   gettimeofday(&et, NULL);
    103 
    104   printf("end : %d.%d\n", et.tv_sec, et.tv_usec);
    105   
    106   munmap(fb, COLS*ROWS);
    107   
    108 TERMINATED:
    109   close(fd);
    110   return 0;
    111 }
}}}             

잘못된 코드의 실행 결과입니다. 실행 시간이 매우 오래 걸리고 실제로 보드의 LCD 화면을 보면 이미지가 화면에 뿌려지는게 보일 정도로 느립니다. 화면이 검은색에서 흰색으로 변하는데 약 50 초가 걸렸습니다.
{{{
[root@Linux /]#./a.out
x-resolution : 640
y-resolution : 480
x-resolution(virtual) : 640
y-resolution(virtual) : 480
bpp : 16
length of frame buffer memory : 614400
start : 1763.575837
end : 1816.465495
[root@Linux /]#
}}}


제대로 작성한 코드입니다.
{{{#!vim c
    1 #include <stdio.h>
      2 #include <stdlib.h>
      3 #include <unistd.h>
      4 #include <fcntl.h> 
      5 #include <sys/ioctl.h>
      6 #include <sys/types.h>
      7 #include <linux/fb.h>
      8 #include <sys/mman.h>
      9 
     10 #include <sys/time.h>
     11 #include <time.h>
     12   
     13 #define COLS 640
     14 #define ROWS 480 
     15   
     16   
     17   
     18 unsigned short makepixel(unsigned char r, unsigned char g, unsigned char b)
     19 { 
     20   return (unsigned short)( ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3) );
     21 }
     22   
     23 
     24 int main(void)
     25 {   
     26   int fd;
     27   int status;
     28   struct fb_var_screeninfo fbvar;
     29   struct fb_fix_screeninfo fbfix;
     30   unsigned short pixel;
     31   unsigned short *fb;
     32   int i,j, k;
     33   int offset;
     34     
     35   struct timeval st, et;
     36  
     37   
     38   fd = open("/dev/fb", O_RDWR);
     39   
     40   if (fd < 0) {
     41     perror("error to open device file\n");
     42     return 1;
     43   }
     44 
     45   status = ioctl(fd, FBIOGET_VSCREENINFO, &fbvar);
     46   
     47   if (status < 0) {
     48     perror("error to ioctl(FBIOGET_VSCREENINFO)\n");
     49     close(fd);
     50     return 1;
     51   }
     52 
     53   status = ioctl(fd, FBIOGET_FSCREENINFO, &fbfix);
     54 
     55   if (status < 0) {
     56     printf("error to ioctl(FBIOGET_FSCREENINFO)\n");
     57     close(fd);
     58     return 1;
     59   }
     60 
     61 
     62   printf("x-resolution : %d\n", fbvar.xres);
     63   printf("y-resolution : %d\n", fbvar.yres);
     64   printf("x-resolution(virtual) : %d\n", fbvar.xres_virtual);
     65   printf("y-resolution(virtual) : %d\n", fbvar.yres_virtual);
     66   printf("bpp : %d\n", fbvar.bits_per_pixel);
     67   printf("length of frame buffer memory : %d\n", fbfix.smem_len);
     68 
     69 
     70   fb = (unsigned short *)mmap(0, COLS*ROWS*2, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
     71 
     72   if ((unsigned int)fb == (unsigned int)-1) {
     73     perror("mmap() failed\n");
     74     goto TERMINATED;
     75   }
     76 
     77 
     78   gettimeofday(&st, NULL);
     79 
     80   printf("start : %d.%d\n", st.tv_sec, st.tv_usec);
     81 
     82 
     83   for (k = 0; k < 256; k++) {
     84 
     85     pixel = makepixel(k, k, k);
     86 
     87     for (i = 0; i < 480; i++) {
     90       for (j = 0; j < 640; j++) {
     91         *(fb + i*640 + j) = pixel;
     92       }
     93     }
     94     
     95   }
     96 
     97   gettimeofday(&et, NULL);
     98 
     99   printf("end : %d.%d\n", et.tv_sec, et.tv_usec);
    100     
    101   munmap(fb, COLS*ROWS);
    102     
    103 TERMINATED:
    104   close(fd);
    105   return 0;
    106 } 
}}}             

실행을 해보면 실행 시간도 약 5초로 10배정도 빨라졌고 LCD 화면도 부드럽게 변합니다.
{{{
[root@Linux /]#./a.out
x-resolution : 640
y-resolution : 480
x-resolution(virtual) : 640
y-resolution(virtual) : 480
bpp : 16
length of frame buffer memory : 614400
start : 1484.555998
end : 1489.507473
[root@Linux /]#
}}}

코드를 보면 약간 이상한게 있습니다. 메모리를 쓰는 코드에서는

{{{#!vim c
     16   for (x = 0; x < 640; x++) {
     17     for (y = 0; y < 480; y++) {
     18       buffer[x][y] = count;
     19       count++;
     20     }
     21   }
}}}

이렇게 밖의 루프에 행의 갯수를 지정하고 안의 루프에 열의 갯수를 지정했는데요
프레임 버퍼 코드에서는 다음과 같이 반대로 밖의 루프에 열의 갯수를 지정하고 안의 루프에 행의 갯수를 지정했습니다.

{{{#!vim c
     87     for (i = 0; i < 480; i++) {
     90       for (j = 0; j < 640; j++) {
     91         *(fb + i*640 + j) = pixel;
     92       }
     93     }
}}}

그 이유는 화면의 가로를 x 축으로 놓고 화면의 세로르 y 축으로 생각해보면 알 수 있습니다. 먼저 x 축 방향으로, 즉 가로로 한 줄을 그리고 그 아래에 또 한줄, 또 한줄씩 그려나가는 방식으로 LCD에 이미지를 뿌립니다. 이때 가로가 640 픽셀이므로 열의 갯수가 640이 되고 행의 갯수가 480이 되는 것입니다. 즉, 가로줄이 480 개가 있고 세로 줄이 640개가 있으므로 행과 열이 반대로 되는 것이지요. 2차원 배열과 이미지 처리는 이렇게 약간 헷갈리게 되어있습니다. 이 점만 주의하면 빠르게 처리할 수 있습니다.

== Why? ==

왜 메모리가 순차적으로 접근되야 빠른지 이유를 말씀드리겠습니다. 그 이유는 메모리가 SDRAM이기 때문입니다. DRAM에서 S가 붙은 이유가 바로 Synchronous 하기 때문입니다. 동기식으로 동작한다는 말이지요. 즉 클럭 신호에 맞춰서 데이터를 보내줄 수 있다는 것입니다.

SDRAM은 Burst-Mode 라는 동작 방식을 가지고 있습니다. 연속된 메모리 영역을 읽거나 쓸 때 시작 주소와 크기만 알려주면 한방에 영역 전체를 읽고 쓸 수 있습니다. 만약 메모리를 한바이트씩 써야 한다면 메모리에 접근한 영역의 주소를 가르쳐주고 잠시 기다렸다가 데이터를 전송하는 방식으로 데이터를 써주어야 하는데 연속된 영역을 쓸 때는 클럭 신호에 맞춰서 데이터만 전송해주면 메모리가 알아서 다음 주소에 써주고 또 다음 클럭에는 다음 주소에 써주고를 반복합니다.

짧게 말하면 CPU는 데이터만 넘겨주고 주소 지정을 메모리가 알아서 하는 것이지요. 단 주소가 1씩 순서대로 증가할 때 만요. 이런 동작 방식이 있기 때문에 메모리에 순차적으로 접근할 때 더 동작이 빠른 것입니다.

== End ==

그냥 잠깐 고민하면서 적어봤습니다. 제가 쓴 다른 문서들이 그렇듯이 그냥 제가 다시 보기 위한 문서라서 좀 두서가 없습니다만 그래도 이왕이면 읽는 분들께 도움이 되길 바랍니다.
