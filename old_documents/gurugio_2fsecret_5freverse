'''Secret of Reverse Engineering''' 책 정리

----

[[TableOfContents]] 

----

''' Introduction '''

 * Reverse engineering is a process where an engineered artifact (such as a car, a jet engine, or a software program) is deconstructed in a way that reveals its innermost details, such as its design and architecture.
 * This is similar to scientific research that studies natural phenomena

 * Software reverse engineering boils down to taking an existing program for which source-code or proper documentation is not available and attempting to recover details regarding its’ design and implementation.
 * This book deals specifically with what is commonly referred to as binary reverse engineering.

 * Binary reverse engineering works, it can solve problems that are often incredibly difficult to solve in any other way, and it is not as difficult as you might think once you approach it in the right way.
 * Reverse engineering is frequently used in a variety of environments in the software industry, and one of the primary goals of this book is to explore many of these fields while teaching reverse engineering.

'''Who Should Read  this book'''

 * Software developers interested in improving their understanding of various low-level aspects of software: operating systems, assembly language, compilation, etc. would certainly benefit.


= Foundations =

 * 리버스 엔지니어링이란? 사람이 만든 것으로부터 지식이나 설계를 얻어내는 것

 * 설계나 지식 등의 정보를 잃어버린 경우, 혹은 소유자가 공개하지 않는 경우에 정보를 얻어내는 방법

 * 소프트웨어의 리버스 엔지니어링: 코드 분해, 퍼즐 맞추기, 프로그래밍, 논리 분석 등의 기술을 이용해서 프로그램을 열고 속을 들여다보는 것

== 보안 관련 리버싱 ==

 * 악의적인 소프트웨어 관련: 취약점을 찾아서 공격하는 소프트웨어를 만들기에 리버싱 기법이 사용됨

 * 암호 알고리즘의 리버싱: 알고리즘 자체를 깨뜨리는 방법은 어렵지만 프로그램의 구현상 취약점을 찾는 등의 방법으로 암호를 깨뜨릴 수 있음

 * DRM 관련: DRM 기법의 내부 기술을 알아내어 자료 보호를 해지시킴

 * 바이너리 프로그램 수정: 라이센스가 걸려있는 소프트웨어를 분석해서 보안상의 취약점을 찾아낼 수 있음

== 소프트웨어 개발의 리버싱 ==

 * 소프트웨어의 내부 기술을 알아내거나 라이브러리/운영체제의 품질 평가에 응용

 * 경쟁사 제품의 핵심 기술을 알아내는데 응용

== 로우 레벨 소프트웨어 ==

 * 리버스 엔지니어가 되기 위해서는 로우 레벨 소프트웨어(시스템 소프트웨어)와 로우 레벨 프로그래밍에 대해 깊은 이해를 가지고 있어야 함

 * 리버스 엔지니어는 소프트웨어의 로우 레벨 측면만을 다루게 되기 때문

 * 리버싱 기술을 익히는 것과 마찬가지로 다양한 로우 레벨 소프트웨어와 소프트웨어 엔지니어링을 익히는 것이 중요함

 * 이 책을 읽어나갈 수록 절실하게 느껴지는 것은 디스어셈블러나 디컴파일러와 같은 리버싱 툴들은 해답을 주는 것이 아니라 정보를 보여주는 역할만 한다는 것임

 * 리버싱을 하면서 유용한 정보를 얻어내기 위해서 리버서는 다양한 로우 레벨 소프트웨어의  기술을 알아야 함

 * 어셈블리 언어
  * 어셈블리 언어는 리버싱의 언어임
  * 리버싱에 있어서 가장 필수적인 언어이며 리버싱하고자 하는 플랫폼의 어셈블리 언어를 깊게 이해해야 함

 * 컴파일러: 컴파일러가 만드는 기계 코드에는 다양한 최적화 기술이 적용되므로 컴파일러에 대한 이해도 필요함

 * 가상 머신과 바이트 코드: 바이트 코드 기반 언어의 리버싱은 실행 환경의 리버싱보다 간단한 경우가 많음

 * 운영체제: 운영체제는 응용 프로그램이 외부와 연결되는 통로 역할을 하므로 많은 리버싱 기술이 운영체제과 연관됨

== 리버싱 절차 ==

 * 시스템 레벨 리버싱: 프로그램의 전체적인 구조를 이해하고 분석할 곳을 찾는 것
  * 다양한 툴과 운영체제 서비스를 이용하여 프로그램의 정보를 얻어낸다

 * 코드 레벨 리버싱: 원하는 부분의 코드를 분석하는 것
  * 많은 양의 코드가 컴파일러에 의해 자동으로 생성되므로 실제로 어떤 역할을 하는 코드인지 알아내기가 쉽지 않음
  * 따라서 리버싱을 위해서는 소프트웨어의 로우 레벨 동작과 하이 레벨 프로그래밍-로우 레벨 프로그래밍의 연관성, 어셈블리 언어, 컴파일러의 내부 동작 원리에 대해서 잘 알고 있어야 함

== 리버싱 도구 ==

 * 시스템 모니터링 도구: 네트워킹 동작, 파일 접근, 레지스트리 접근 등을 모니터하는 도구들
  * 프로그램이 운영체제의 어느 자원을 사용하고 있는지도 알 수 있음

 * 디스어셈블러: 프로그램의 실행 파일을 어셈블리 언어로 보여주는 프로그램

 * 디버거: 소프트웨어 개발자에게와 마찬가지로 리버서에게 디버거는 매우 중요한 툴이지만 사용하는 이유가 다름
  * 리버서는 디버거를 디스어셈블리 모드로 사용하는 경우가 많음

 * 디컴파일러: 실행 파일을 읽어서 하이 레벨 언어 코드로 보여줌
  * 완전한 디컴파일은 불가능하지만 특정 상황에서는 강력한 툴임

== 리버싱은 불법인가? ==

 * 허가를 받지 않거나 라이센스가 없는 특정 플랫폼 상에서 플랫폼과 연동하는 프로그램을 만들때나, 인터페이스가 공개되지 않은 소프트웨어와 연동하는 프로그램을 만들 때 리버싱을 사용할 수 있다. 이에 대해 합법이라는 판결이 있음

 * 기존 것과 유사한 프로그램을 만들 때 기존 프로그램을 리버싱하는 일의 합법성은 논란의 여지가 있다. 다른 프로그램의 코드 일부나 그 자체를 그대로 사용하는 것은 불법이다. 하지만 기존 코드를 분석해서 유사한 일을 하면서 다른 코드를 만든다면 밝혀내기 어렵게 된다. 다른 프로그램의 코드를 리버싱하는 것이 아니라 특정 정보만을 분석해내서 자신의 프로그램 개발에 이용하는 것은 인정된다.

 * DMCA: ko.wikipedia.org/wiki/디지털_밀레니엄_저작권법


= Low-Level Software =

''별로 중요한 내용은 없었음''

== HIgh-level perspectives ==

 * 자료구조 소개
  * 고급 언어의 이런 요소들이 있는데 이것들이 어셈블리로 어떻게 변환되는지 알아야 한다?
  * 예를 들어 링크드 리스트나 루프 같은 것들은 어셈블리로 변환될 때 비교적 일정하게 바뀌므로 쉽게 알아볼 수 있다.

 * 고급 언어로 개발할 때는 그 내부에서 실제로 머신이 어떻게 동작하는지 모르지만 리버싱을 할 때는 내부 동작을 잘 알아야 한다. 고급 언어의 내부를 이해할 필요가 있다.

== Low-level perspectives ==

 * 고급 언어는 데이터 처리에 대해 사람이 이해하기 쉬운 방법을 제공하므로 같은 처리를 어셈블리 언어로 하려면 기계 중심적으로 생각할 수 있어야 한다. 문제 해결을 위한 접근 방법이 많은 차이가 있다.

 * 데이터 처리에서 레지스터의 할당이나 계산이 가장 복잡한 문제이다. 

 * 누가 그걸 모르나? 갠히 겁주는것 같어.

== Assembly language 101 ==

 * x86 어셈블리 언어에 대한 간단한 소개 - 너무 간단해서 안읽고 그냥 넘어감

== A primer on compilers and compilation ==

 * 컴파일러의 구조
  * Front End: 소스 코드 분석 및 파싱
  * Intermediate Representations: 기계어도 아니고 고급 언어도 아닌 중간 단계의 표현식으로 소스 코드를 변환 - 아마도 여러 플랫폼에서 동작하기 위해서 바로 기계어를 뽑지 않고 중간 표현을 가지는 것 같음. 최적화하기에도 편리함
  * Optimizer : 최적화
  * Back End: 타겟 머신의 어셈블리 코드 출력 - 이것도 굉장히 복잡한 과정임, 명령어 선택/레지스터 할당/명령어 스케줄링 등의 테크닉 적용





 
