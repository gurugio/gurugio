'''64비트-SMP 커널 만들기 - 8장 동적 메모리 관리'''


----

 * 작성자: 김기오 
 
 * 문서 소개
64비트-SMP 커널 만들기 강좌의 8장

----

 * 작성 일지

2009.3.2 김기오: 작성 시작


----

[[TableOfContents]] 

----

= 동적 메모리 관리 =


== 메모리 관리를 위한 node, zone 설정 ==


대규모 서버 등에서는 프로세서마다 좀더 빠르게 접근할 수 있는 메모리를 따로 가지고 있지만x86_64 프로세서를 사용하는 PC에서는 모든 프로세서가 똑같이 하나의 물리 메모리에 접근할 수 있다. 따라서 x86_64 시스템에서는 하나의 메모리 노드를 가진다. 또한 예전 ISA 시스템에서는 DMA가 접근가능한 하위 1MB 영역과 나머지 영역을 구분해서 사용했지만 x86_64에서는 모든 메모리가 똑같이 사용하므로 한개의 zone을 가진다. 따라서 굳이 node와 zone을 만들 필요는 없지만 페이지 할당을 위한 버디 알고리즘을 구현하기 위해서 리눅스 커널과 유사하게 node와 zone을 만들어서 사용한다.

memory.c 파일의 memory_init 함수가 node와 zone을 설정하는 함수이다. 하나의 node에 대한 정보를 저장하는 struct pglist_data는 다음과 같은 항목을 가진다.

 * struct zone node_zones[MAX_NR_ZONES]: 해당 node에 속하는 zone의 디스크립터
 * size_t nr_zones: node에 속하는 zone의 갯수
 * struct page *node_mem_map: 페이지 테이블에서 어느 페이지부터가 해당 node에 속하는지를 알기 위해 해당 node에 속하는 첫번째 페이지의 디스크립터 포인터를 저장함
 * u64 node_start_paddr: node의 시작 물리 메모리 주소
 * size_t node_size: node의 물리 메모리 크기
 * size_t node_id: 노드 번호, 시스템에 여러개의 노드가 있을 경우를 가정함
 * struct pglist_data *node_next: 다른 node에 대한 포인터

x86_64 시스템에는 하나의 node가 존재하므로 contig_page_data라는 한개의 변수를 만들어서 node 관리에 사용한다. 다음은 node에 대한 디스크립터 config_page_data를 초기화하는 코드이다. 

{{{
 84     contig_page_data.nr_zones = MAX_NR_ZONES;
 85     contig_page_data.node_mem_map = mem_map;
 86     contig_page_data.node_start_paddr = 0;
 87     contig_page_data.node_size = phy_mem_size*ONE_MB;
 88
 89     // nodes are for NUMA & SMP system.
 90     // These are reserved for future.
 91     contig_page_data.node_id = 0;
 92     contig_page_data.node_next = NULL;  // only node
 93
 94
 95     z = &contig_page_data.node_zones[ZONE_NORMAL];
}}}

추후에 SMP를 위한 기능을 추가로 구현할 때 각 프로세서가 전용으로 사용할 물리 메모리를 나누고 각각을 node로 표현할 예정이다.

그 다음으로 node에 속하는 zone을 초기화한다. zone을 나타내는 구조체 struct zone은 다음 항목들을 가진다.

{{{
 37 struct zone {
 38     // number of free pages in zone
 39     size_t free_pages;
 40     // node includes zone
 41     struct pglist_data *zone_pgdat;
 42     // physical memory address
 43     u64 zone_start_paddr;
 44     // zone name
 45     char *name;
 46     // memory size (in byte)
 47     size_t size;
 48     // number of total pages
 49     size_t pages;
 50
 51     // first mem_map entry belongs to zone
 52     struct page *zone_mem_map;
 53     // first page-frame number belongs to zone
 54     size_t zone_start_pfn;
 55
 56 };
}}}

memory_init 함수의 후반부에서 zone을 초기화한다.

{{{
 55     //
 56     // zone setup
 57     //
 58
 59     z = &contig_page_data.node_zones[ZONE_NORMAL];
 60
 61     z->size = contig_page_data.node_size;   // size
 62     z->zone_pgdat = &contig_page_data;      // including node
 63     z->zone_start_paddr = contig_page_data.node_start_paddr;    // physical memory address
 64     z->name = zone_names[ZONE_NORMAL];      // name
 65
 66     z->pages = contig_page_data.node_size / PAGE_SIZE; // included page count
 67
 68     // the first page index
 69     z->zone_start_pfn = (size_t)(contig_page_data.node_mem_map - mem_map);
 70
 71     // descriptor of the first page belongs to the zone
 72     z->zone_mem_map = &mem_map[z->zone_start_pfn];
 73
 74     //
 75     // Pages in the same zone is linked together
 76     //
 77     for (l=z->zone_start_pfn; l<z->pages; l++) {
 78         list_add_tail(&mem_map[l].list, &(z->zone_mem_map->list) );
 79         mem_map[l].page_zone = z;
 85     }
 86
 87     // count free pages in the zone
 88     head = &contig_page_data.node_mem_map[0].list;
 89     list_for_each_entry(pg, head, list) {
 90         if (pg->count == 0)
 91             (z->free_pages)++;
 92     }
}}}

먼저 어떤 페이지들이 해당 zone에 속하는지 알기 위해 zone의 크기나 zone에 속한 페이지 디스크립터를 설정한다. 그리고 같은 zone에 속한 페이지들끼리 리스트로 연결해준다.


== 페이지 메모리 관리 ==


=== 페이지 할당 ===


하나의 페이지를 관리하기 위한 페이지 디스크립터는 struct page 구조체로 선언된다. 다음과 같인 필드를 가진다.

 * struct list_head list: 동일 메모리 존에 속한 페이지들의 리스트
 * size_t private: 연속된 빈 페이지의 시작 페이지일 때 빈 페이지의 개수 저장, order 단위
 * size_t index: 페이지 번호
 * size_t count: 사용중 카운터
 * flag_t flags: 상태 플래그
 * void * virtual: 이 페이지가 매핑된 선형 주소
 * struct zone *page_zone: 이 페이지가 속한 메모리 존 포인터
 * void *slab: 이 페이지가 사용된 슬랩 포인터

페이지 단위로 메모리를 할당받기 위해서는 page_alloc.c 파일에 구현된 alloc_pages 함수를 사용한다. zone이라는 것은 결국 연속적인 페이지들의 집합을 의미한다. 따라서 페이지 단위 메모리 할당은 zone을 기준으로 처리된다. 예를 들어 ISA 시스템에서 DMA 처리를 위한 페이지를 할당받고자 할 때는 alloc_pages 함수의 gfp_mask 속성에 해당 속성을 셋팅해서 전달하면 DMA에 사용될 수 있는 zone을 선택해서 페이지 할당을 실행해야 한다. 하지만 현재까지는 페이지 속성에 대한 처리를 구현하지 않았다. 또한 시스템의 메모리 노드도 하나뿐이므로 메모리 노드가 가지는 zone의 리스트를 실제로 페이지 할당을 처리하는 __alloc_pages 함수로 전달하기만 한다.

{{{
 17 //
 18 // allocate pages in order-number
 19 // @gfp_mask: page attributes
 20 // @order: power of two of allocation size in pages,
 21 // 0 is a single page, 3 is 2^3=8 pages
 22 //
 23 struct page *alloc_pages(flag_t gfp_mask, size_t order)
 24 {
 25     if (order > MAX_PAGE_ORDER)
 26         return NULL;
 27
 28     //
 29     // gfp_mask processing should be here
 30     // According to the gfp_mask, node is selected if there are several nodes.
 31     //
 32
 33     // only one node is considered yet.
 34     return __alloc_pages(gfp_mask, order, contig_page_data.node_zones);
 35
 36 }
}}}


__alloc_pages 함수가 하는 일은 간단하다. 먼저 각 zone의 핀 페이지 갯수를 체크한다.

{{{
 57     i = 0;
 58
 59 FIND_ZONE:
 60     // find zone that has enough pages
 61     for (; i < MAX_NR_ZONES; i++) {
 62         if (zonelist[i].free_pages > count) {
 63             zone = &zonelist[i];
 64             map = zone->zone_mem_map;
 65             break;
 66         }
 67     }
}}}

 그리고 충분한 갯수의 페이지가 있다면 zone에 속한 페이지의 디스크립터를 순회하면서 연속적인 빈 페이지를 찾는다.

{{{
 73     // find sequence of free pages in the zone
 74     for (first = 0; first < zone->pages; first++) {
 75         // find a free page
 76         if (map[first].count != 0) {
 77             continue;
 78         }
 79
 80
 81         // map[first]~map[first+count] are free?
 82         for (last=0; last<count; last++) {
 83             // no free page
 84             if (map[first+last].count > 0) {
 85                 first += last;
 86                 break;
 87             }
 88         }
 89
 90
 91         // found enough space
 92         if (last == count) {
 93 #ifdef DEBUG
 94             caos_printf("alloc_pages(%x~%x) ", first, first+last-1);
 95 #endif
 96             // increase usage-counter of every allocated pages
 97             for (last=0; last<count; last++) {
 98                 map[first+last].count = 1;
 99                 map[first+last].flags = gfp_mask;
100             }
101
102             zone->free_pages = zone->free_pages - count;
103
104             // number of pages which are allocated together
105             map[first].private = count;
106
107 #ifdef DEBUG
108             caos_printf("[%x]private=%d\n", map+first, map[first].private);
109 #endif
110
111
112
113             // following pages are free, return page pointer
114             return map + first;
115         } // if(last==count)
116
117
118     }
}}}

먼저 빈 페이지를 찾고, 찾은 빈 페이지의 다음에도 연속적으로 빈 페이지가 있는지를 확인한다. 요청된 갯수만큼 빈 페이지가 있다면 해당 zone의 빈 페이지 갯수를 감소시키고, 할당된 각각의 페이지의 참조 카운터를 1로 설정한다.

그런데 zone의 빈 페이지 갯수는 충분한데, 연속적인 빈 페이지가 없는 경우가 있다. 따라서 연속된 빈 페이지 검색이 실패한 경우 다른 zone에 대한 검색을 하기 위해 다음과 같이 처리한다.

{{{
126     // the number of free-pages is enough
127     // but free-pages in the zone is not sequential.
128     // go to next zone
129     if (i < MAX_NR_ZONES) {
130         i++;
131         goto FIND_ZONE;
132     }
}}}

함수 시작 부분에 있는 각각의 zone을 순회하면서 빈 페이지의 갯수를 찾는 코드로 되돌아간다. 현재 페이지 할당이 실패한 zone을 다시 순회하지 않도록 zone 카운터를 증가시킨다. 
모든 zone에 대해 페이지 할당이 실패한 경우에는 NULL 값을 반환한다.


=== 페이지 해지 ===


페이지 단위로 할당받은 메모리를 해지하기 위해서 free_pages 함수를 구현했다. 할당받은 메모리의 시작 주소로 메모리를 해지할 때는 free_pages 함수를 사용하고, 페이지 디스크립터를 이용하여 메모리를 해지할 때는 __free_pages 함수를 이용한다.

free_pages 함수는 virt_to_page 함수를 이용해서 선형 주소에 해당되는 page 디스크립터를 알아내서 __free_pages 함수를 호출한다. 실제적인 메모리 해지는 __free_pages 함수에서 실행한다.

페이지 해지는 할당에 비해 매우 간단하다. 다음과 같이 해지된 페이지들의 참조 카운터를 감소시키고, 페이지가 속한 zone의 빈 페이지 카운터를 증가시키면 된다. 그리고 연속된 페이지들이 해지되었으므로 private 필드에 음수값을 저장한다.

{{{
230     for (i=0; i < pg_count; i++) {
231
232         if (page[i].count <= 0) {
233             caos_printf("free_pages fail <page-counter error> at page[%d]\n", page-mem    _map);
234         }
235
236         page[i].count--;
237
238         if (page[i].count == 0) {
239             zone->free_pages++;
240         }
241
242     }
243
244     // page-bulk are freed
245     if (page->count == 0) {
246         page->private = -1;
247     }
}}}


== 슬랩 알고리즘 구현 ==


슬랩 알고리즘이란 다양한 크기의 메모리를 미리 할당해놓고 , 메모리 요청이 들어오면 미리 할당해놓은 메모리를 반환해주는 방식의 메모리 관리 알고리즘이다. 이때 미리 할당해놓은 메모리를 관리하는 데이터 구조를 슬랩이라고 부르고, 슬랩들을 관리하는 데이터 구조가 캐시이다.

캐시는 struct kmem_cache 구조체로 선언된다.

{{{
 31 struct kmem_cache {
 32     //size_t limit; // max # of objs per cache
 33     size_t objsize; // size of obj
 34     flag_t flag;    // flags of cache
 35     size_t num;     // # of objs per slab
 36
 37     size_t gfporder;    // # of page per slab
 38     struct list_head slabs; // pointer to slab
 39
 40     u64 colour_off;     // offset of the first object from page boundary
 41
 42     const char *name;   // cache name
}}}

슬랩 디스크립터는 struct slab 구조체로 선언된다.

{{{
 53     struct list_head list;
 54     u64 s_mem;  // pointer to free object
 55     size_t inuse;   // busy objects count
 56     size_t free;    // index of free object
 57     u64 offset;     // offset of the first object from page boundary
 58
 59     // bufctl array
 60     // each entry has index number of the next free obj
 61     kmem_bufctl_t *bufctl;
 62
 63     // cache including this slab
 64     struct kmem_cache *cache;
}}}

슬랩 디스크립터와 함께 객체들을 관리하기 위해서 bufctl 이라는 배열이 사용된다. 타입은 kmem_bufctl_t 이지만 실제로는 다음과 같이 16비트의 정수값으로 선언되어 있어서 어떤 객체가 빈 상태인지를 관리할 때 사용된다.

{{{
 22 typedef u16 kmem_bufctl_t;
}}}


=== 캐시 만들기 ===


슬랩을 만들기 이전에 먼저 캐시 데이터를 만든다. slab.c 파일의 kmem_cache_init 함수에서 최초로 캐시를 만든다. 캐시를 저장하기 위해서 alloc_pages 함수를 호출해서 CACHE_CACHE_PAGE 상수에 선언된 만큼의 페이지를 할당받고 여기에 캐시 배열을 저장한다. 최초로 만들어지는 캐시의 이름은 cache_cache이며 다음 그림과 같이 캐시가 생성된다.

attachment:gurugio/make_64bit_smp_os_chap8/pic_8_1.GIF

cache_names 라는 캐시 이름 배열을 정적으로 만들어놓고, 시스템의 초기 부팅시에 어떤 크기의 캐시들을 만들어놓을지 설정할 수 있다. 현재 KMALLOC_SMALL_SIZE 상수가 16으로 선언되어 있고, 캐시의 이름도 16bytes 에서 시작되도록 구현했다. 

캐시를 초기화하는 함수는 kmem_cache_init이지만 실제로 캐시를 생성하는 함수는 kmem_cache_create 이다. 새로 만들 캐시의 이름과 캐시 크기 등을 전달하면 cache_cache 배열에서 빈 엔트리를 찾고, 새로운 캐시를 만든다. 

새로운 캐시를 만들 때는 가장 먼저 캐시가 관리할 슬랩에 몇 페이지의 메모리가 필요할지 계산한다.

{{{
248     // pages for storing slabs
249     // In slab-page, slab structure and kmem_bufctl_t array and objects are stored.
250     page_need = (sizeof(struct slab) + (size * SLAB_DEFAULT_NUM) + \
251             (sizeof(kmem_bufctl_t) * SLAB_DEFAULT_NUM) ) / PAGE_SIZE;
252
253
254     // order of request page count
255     // fls returns left-most set bit
256     if (page_need == 0)
257         page_order = 1;
258     else
259         page_order = fls64(page_need);
260
261 #ifdef DEBUG
262     caos_printf("need:%d order=%d ", page_need, page_order);
263 #endif
264
265     // number of slab-pages
266     cachep->gfporder = page_order;;
}}}

SLAB_DEFAULT_NUM은 슬랩을 만들 때 최소한으로 가져야할 객체의 갯수이다. 하나의 슬랩은 연속된 페이지 프레임에 저장되는데 예를 들어 슬랩 디스크립터의 크기와 객체의 크기, bufctl의 크기 등을 합쳐서 10000 바이트가 된다면 해당 슬랩에는 3개의 페이지가 필요해진다. 페이지 관리는 항상 order 단위로 처리되므로 order 값이 3 (페이지 갯수는 8개) 인 캐시가 만들어진다.

fls 함수는 정수 값에서 1로 셋팅된 비트중 가장 높은 자리의 비트 번호를 알려준다. order 값을 페이지 갯수로 바꾸기 위해서 왼쪽 쉬프트를 하는 것과 반대의 연산을 하는 것이므로, 정수 값을 해당 order로 바꾸는 연산이다. 예를들어 0~1 값은 1로, 2~3 값은 2로, 3~7 값은 3이 출력된다.

페이지 크기가 정해졌으면 새로 몇개의 객체가 저장될 수 있는지를 계산한다.

{{{
277     // 1. approximate number of objs that one slab can have (if no bufctl)
278     obj_num = ((1<<page_order)*PAGE_SIZE - sizeof(struct slab)) / cachep->objsize;
279     // 2. maximum number of bufctl, actual bufctl is less than this
280     bufctl_size = obj_num * sizeof(kmem_bufctl_t);  // size of kmem_bufctl_t array
281
282     // 3. obj number considering bufctl
283     obj_num -= (bufctl_size/size + 1);
284     cachep->num = obj_num;
}}}

만약 8개의 페이지가 필요하고, 객체의 크기가 512바이트라면 슬랩 디스크립터의 크기와 bufctl의 크기를 뺀 나머지 공간이 객체가 저장되는 공간이므로 다음 순서로 각각의 갯술를 계산한다. bufctl 배열은 객체의 갯수에 따라 크기가 달라지므로 먼저 bufctl 배열을 고려하지 않고 최대 몇개의 객체가 저장될 수 있는지를 계산한다. 그리고 bufctl 배열의 크기를 빼면 객체의 갯수를 계산할 수 있다.

1. bufctl 배열을 고려하지 않을 때의 객체의 갯수 = (페이지 크기 -  슬랩디스크립터)/객체 크기
2. bufctl 배열의 크기 = 객체 갯수 * bufctl 엔트리 크기
3. 1번에서 계산한 객체의 갯수에서 bufctl 배열이 차지할 공간을 뺌

bufctl 배열의 엔트리가 실제 객체의 갯수보다 커지는 단점이 있지만 계산이 간단해지므로 이와같이 구현했다.


=== 슬랩 만들기 ===


캐시가 만들어졌으면 그 다음에는 실제로 슬랩을 만들어서 빈 객체들을 생성해야 한다. 슬랩을 만드는 함수는 kmem_cache_grow이고, 슬랩을 없애는 함수는 kmem_cache_shrink이다.

예를 들어 64bytes라는 이름을 가지고 객체 크기가 64바이트인 캐시에 슬랩을 생성한 그림이다.

attachment:gurugio/make_64bit_smp_os_chap8/pic_8_2.GIF

캐시 디스크립터에는 자신이 관리하는 슬랩들의 리스트인  slabs 필드가 있고 여기에 새롭게 생성된 슬랩이 추가된다. 그리고 슬랩 디스크립터를 초기화하는 일을 하는 것이 kmem_cache_grow 함수이다.

kmem_cache_grow 함수는 가장 먼저 슬랩과 객체들을 저장할 페이지를 할당받는다. 

{{{
319     slabp = (struct slab *)kmem_getpages(cachep, flags);
320
321     if (slabp == NULL)
322         return 0;
}}}

슬랩에 사용할 페이지를 할당받는 kmem_getpages 함수를 만들었다. 이 함수는 alloc_pages 함수를 호출해서 페이지를 할당받고 할당된 페이지들의 페이지 디스크립터에서 flag 필드에 PG_slab 비트를 셋팅한다. 그리고 페이지 디스크립터의 slab 필드에 slab 디스크립터의 주소를 저장한다. 하나의 슬랩이 여러개의 페이지에 저장되는데 슬랩 디스크립터와 다른 페이지에 있는 객체를 다룰 때에도 슬랩의 주소를 알아내기 위해서 페이지마다 slab 필드를 가진다.

그리고 슬랩 디스크립터의 각 필드를 셋팅한다. 

{{{
329     // the number of busy obj
330     slabp->inuse = 0;
331
332     // offset of the first obj from the base of page
333     slabp->offset = cachep->colour_off;
334
335     // slab is just followed by bufctl array.
336     slabp->bufctl = (kmem_bufctl_t *)(slabp+1);
337
338     // pointer to the first obj
339     slabp->s_mem = ((u64)slabp + slabp->offset);
340
341     // cache including this slab
342     slabp->cache = cachep;
343
344     // index of the first free object
345     slabp->free = 0;
346
347     // add slab into slab-list of cache
348     INIT_LIST_HEAD(&slabp->list);
}}}

다음으로 bufctl 배열을 초기화한다.

{{{
355     // bufctl element is the index of next free object
356     for (i=0; i < cachep->num; i++) {
357         (slabp->bufctl)[i] = i+1;
358     }
359     // signature of last bufctl
360     (slabp->bufctl)[i-1] = BUFCTL_END;
}}}

bufctl은 간단한 원리로 동작한다. 가장 앞에있는 빈 객체의 번호는 free 필드에 저장된다. 만약 free 필드가 0이면 bufctl[0]의 값은 0번 객체의 다음에 있는 빈 객체의 번호이다. 현재 모든 객체가 빈 상태이므로 bufctl 배열은 1부터 차례대로 값을 가진다. 마지막 객체는 BUFCTL_END라는 특수한 값을 가져서 더 이상 빈 객체가 없음을 나타낸다.

마지막으로 cache의 슬랩 리스트에 새로 생성된 슬랩을 추가한다.

{{{
367     // cache has slab list
368     list_add(&slabp->list, &cachep->slabs);
}}}


=== 슬랩 삭제 ===


시스템 메모리가 부족하거나 하나의 캐시에 너무 많은 빈 슬랩이 있는 등의 경우에 슬랩을 없애야 할 필요가 생긴다. 슬랩을 없애는 함수는 kmem_cache_shrink 이다. kmem_cache_shrink 함수는 하나의 캐시에 연결된 슬랩을 모두 검사해서 사용중인 객체가 없는 슬랩은 모두 제거한다. 

{{{
382     // travel slab-list
383     list_for_each_entry(slabp, slabs_list, list) {
384 #ifdef DEBUG
385         caos_printf("slabs=%x\n", slabp);
386 #endif
387
388         // remove one slab at a time
389         if (slabp->inuse == 0) {
390             // desctroy one slab
391             slab_destroy(cachep, slabp);
392             list_del(&(slabp->list));
393             break;
394         }
}}}

캐시에 있는 슬랩 리스트를 순환하면서 빈 슬랩마다 slab_destroy 함수로 처리한다. slab_destroy 함수는 kmem_freepages 함수를 이용해서 하나의 슬랩만을 제거한다. 

kmem_freepages 함수는 kmem_getpages 함수와 반대로 동작한다. 각각의 페이지 디스크립터의 slab 필드의 값을 제거하고 flag 필드에서 PG_slab 비트를 클리어한다. 그리고 free_pages 함수를 호출해서 빈 페이지로 돌려놓는다.


== 커널 메모리 할당 ==


커널 레벨의 메모리 할당은 caos_kmalloc 함수로 구현된다.

caos_kmalloc 함수는 가장 먼저 요청된 메모리 크기보다 크기가 큰 캐시를 찾는다. 그리고 캐시에 속한 슬랩들 중에서 빈 객체를 찾는다. 만약 모든 슬랩에 빈 객체가 없다면 kmem_cache_grow 함수를 호출해서 새로운 슬랩을 할당받는다.

{{{
481     // travel slab-list, find a slab which has free object
482     list_for_each_entry(slabp, slabs_list, list) {
483         if (slabp->free != BUFCTL_END && slabp->inuse < cachep->num) {
484             break;
485         }
486     }
487
488
489     // no slab is found, create new slab-pages
490     if (slabs_list == &(slabp->list)) {
491
492         // add a new slab to the cache
493         kmem_cache_grow(cachep, flags);
494
495         retry_count++;
496
497         // Adding new slab can takes long time,
498         // so that other processes can be scheduled.
499         // Therefore other processes occupies new created slab
500         // and still no slab is available.
501         // In that case, it tries other caches which has bigger object size.
502         if (retry_count > 1)
504             cache_index++, retry_count=0;
504
505         goto retry;
506     }
}}}

새로운 슬랩을 만드는 일은 페이지 단위 처리를 해야하므로 오랜 시간이 걸릴 수도 있으므로 슬랩이 생성된 후에는 메모리를 요청한 프로세스가 아닌 다른 프로세스들이 실행될 수도 있다. 다른 프로세서들도 같은 크기의 메모리를 요청하고 또다시 메모리가 부족한 상황이 올 수도 있으므로 실행 카운터를 만들어서 여러번 메모리 할당을 시도한다.

첫번째 시도에서 슬랩에 빈 객체가 없다면 kmem_cache_grow 함수를 호출해서 새로운 슬랩을 추가한다. 그런데 새로운 슬랩을 생성했어도 또다시 객체 할당에 실패하면 보다 더 객체 크기가 큰 캐시에서 메모리 할당을 시도한다. 즉 32바이트 캐시에서 메모리 할당을 실패하면 64바이트 캐시나 128바이트 캐시에서 메모리 할당을 시도한다.

빈 객체가 있다면 객체의 메모리 주소를 반환하고 bufctl 배열의 값을 조정한다.

{{{
510     obj = slabp->s_mem + slabp->free * cachep->objsize;
511
512     slabp->inuse++;
513
514     // index to next free object
515     slabp->free = (slabp->bufctl)[slabp->free];
}}}

s_mem 필드는 첫 객체의 주소이고, free 필드는 빈 객체의 번호이므로 s_mem + free * 객체크기를 계산하면 객체의 주소 값을 구할 수 있다. 그리고 현재 bufctl배열에서 현재 할당될 빈 객체 다음의 빈 객체 번호를 알아내서 free 필드에 저장한다.


== 커널 메모리 해지 ==


커널 메모리 해지는 caos_kfree 함수로 구현된다. 객체를 해지하기 위해서는 먼저 해당 객체가 속한 슬랩 디스크립터의 주소를 알아야 하는데 슬랩 디스크립터의 주소가 페이지 디스크립터에 저장되어 있으므로 virt_to_page 함수를 사용해서 현재 해지될 객체가 속한 페이지 디스크립터를 알아낸다.

{{{
561     // every page-descriptor has slab field
562     // to descibe what slab the page is included
563     slabp = virt_to_page((u64)objp)->slab;
}}}

그리고 해지될 객체를 첫번째 빈 객체로 설정하고, bufctl 배열에 값을 저장한다.

{{{
588     // modify slab descriptor
589     obj_index = ((u64)objp - (u64)(slabp->s_mem)) / cachep->objsize;
590
591     // freed object is the latest free object
592     (slabp->bufctl)[obj_index] = slabp->free;
593     slabp->free = obj_index;
594     slabp->inuse--;
}}}


== 참고 자료 ==


 * Memory management in Linux :http://www.ecsl.cs.sunysb.edu/elibrary/linux/mm/mm.pdf
 * 리눅스 커널의 이해
 * 김기오문서 http://asmlove.co.kr/wiki/wiki.php/gurugio/MemoryManagement
