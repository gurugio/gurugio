




'''포인터의 의미와 사용법'''



[[TableOfContents]]




= 포인터 연산 =

== 포인터에 정수 더하기/빼기 ==

 * 포인터에 정수를 더한다는 것은 (포인터가 참조하는 객체의 크기 X 정수값)을 메모리 주소에 더한다는 의미이다.
  * p가 16바이트의 객체를 가리키는 포인터라면 p+1은 p의 주소보다 16바이트 큰 메모리 주소를 가리키는 것이다.

 * 포인터의 덧셈은 포인터와 정수값의 덧셈만을 의미한다. 정수값 외에 다른 포인터나 정수가 아닌 자료형을 더하는 것은 의미가 없다.
  * 정수의 부호는 음/양 모두 상관하지 않는다.

 * 포인터에 정수를 뺀다는 것은 현재 포인터 위치에서 상대적으로 이전에 있는 객체를 가르킨다는 의미이다.

 * 뺄셈은 교환법칙을 따르지 않으므로 (정수-포인터)는 의미가 없다.
  * 덧셈을 교화법칙을 따르므로 arr[i]와 i[arr]이 같은 의미를 가진다.

== 포인터에서 포인터 빼기 ==

 * 두 포인터를 빼면 두 포인터 사이의 객체의 수를 얻을 수 있다.

 * 두 포인터가 메모리상의 같은 데이터를 가리키고 있을때만 의미를 가진다.

 * 만약 작은 주소값을 가지는 포인터에서 큰 주소값을 가지는 포인터를 빼면 음수 값이 나온다.
  * 절대값을 취하면 반대의 경우와 마찬가지로 객체의 수를 얻을 수 있다.


== 포인터 값의 비교 ==

 * 두 포인터가 같은 객체를 가리키는지를 확인할 수 있다.

 * 뺄셈과 마찬가지로 같은 데이터를 가리키고 있을 때만 의미가 있다.


== 포인터의 논리 연산 ==

 * AND 연산은 특정 메모리 영역의 주소를 정렬하는데 사용된다.

 * 다음과 같은 예제 코드를 생각할 수 있다.

 1. 할당받을 메모리 크기에 3을 더함
 1. 메모리를 할당받고 메모리 주소에 3을 더함
 1. 메모리 주소를 4의 배수로 만들기 위해 -4 (=0xFFFFFC)와 AND 연산
 1. 이렇게 하면 항상 메모리 영역의 시작 주소를 4바이트 정렬할 수 있음

(실제로 커널 코드에서는 이렇게 특정 데이터의 시작 주소를 정렬하는 경우가 많다. 페이지 단위 정렬을 위해 0xFFF000으로 AND 연산을 하는 경우도 있다. 그리고 이렇게 페이지 단위로 정렬을 하면 특정 데이터가 몇번째 페이지 프레임에 있는지 알 수도 있어서, 페이징 처리에서도 이 방법을 사용한다.)

{{{
#include <stdio.h>


int main(void)
{

        char *area;
        int size = 127;
        int align_size;


        align_size = 127+0x3;
        // area = (char *)malloc(align_size); // practical example
        area = (char *)0x123;                                   // test example

        printf("%p   ==>", area);

        area = (char *)((unsigned int)area + (unsigned int)0x3);
        area = (char *)((unsigned int)area & (unsigned int)-4); // -4 == 0xfffffc


        printf("%p", area);

        return 0;
}

}}}




= 일반적인 포인터 문제 =


== 포인터를 초기화하지 않은 채로 사용하는 것 ==

 * 포인터를 사용하기 전에는 반드시 포인터가 제대로 초기화되었는지 확인한다.

 * 포인터를 선언할 때는 항상 NULL 포인터로 초기화해놓는 것도 한 방법이다.

 * 실제로 초기화되지 않은 변수란 없다.
  * 프로그래머가 명시적으로 초기화 값을 할당한 경우 --> 포인터 값도 제대로 초기화한 경우
  * 메모리에 남은 값을 그대로 사용하는 경우 --> 포인터 값을 초기화하지 않은 경우


{{{

int i;
int *p;

*p = 0;

}}}


== 잘못된 값이 있는 포인터를 사용하는 것 ==

 * 다음과 같은 경우들이 있다
  * 포인터 값이 바뀐 후에도 원래의 포인터 값으로 가정하고 사용
  * 다차원 배열의 포인터를 이해하지 못하고 잘못 사용하는 경우
  * 읽기 전용 영역의 포인터에 데이터를 쓰는 경우
   * 9장에서 본 바와 같이 컴파일러에 옵션에 따라 허용되는 경우도 있으므로 주의해야 함
  * 다른 함수가 반환한 포인터의 값을 확인하지 않고 사용하는 경우
   * 에러로 인해 NULL 값을 반환하는 경우를 확인해야 함

 * 대부분 사용자의 부주의가 원인임

 * 다차원 배열의 포인터를 이해하지 못하고 잘못 사용하는 경우의 예제

{{{

int arr[2][3];
int **p = &arr;

p[1][2] = 0x12345678;

}}}


== 포인터를 해제한 후에 사용하는 것 ==

 * 여러개의 포인터를 사용할 때, 여러 함수에서 동일한 포인터를 사용하는 경우에 일어나기 쉽다.

 * 포인터를 해제한 후에는 항상 NULL 값으로 초기화하고, 사용하기 전에는 NULL 값이 아닌지를 체크한다.

 * 최대한 포인터를 초기화한 함수가 포인터를 해제할 수 있도록 설계한다.

 * 문제가 즉시 발생하지 않을 수도 있으므로 주의해야 한다.


== 잘못된 자료형으로 간접 참조하는 것 ==

 * 포인터가 선언된 원래의 타입이 아니라 다른 타입으로 변환해서 사용할 때 문제가 발생하기 쉽다.

 * 포인터의 정의와 사용법을 정확하게 이해하고 충분히 테스트한 경우에만 타입을 변환해서 사용해야 한다.

 * 드물긴하지만 하드웨어를 다룰 때 다음과 같이 Little-endian을 고려하지 못하고 처리하는 경우가 있다.


{{{
#include <stdio.h>


int main(void)
{

        unsigned int data;
        char *p;

        p = (char *)&data;

        p[0] = 0x12;
        p[1] = 0x34;
        p[2] = 0x56;
        p[3] = 0x78;

        if (data == 0x12345678)
                printf("EQUAL\n");
        else
                printf("ERROR\n");

        return 0;


}

}}}




= 복잡한 포인터 타입 선언의 해석 =


'''int (*a)[4] 나 int *(*a[4])(int *), (*(unsigned long *)&jiffies)++ 에 대해 보다 쉽게 이해할 수 있는 방법이 없을까?'''



 * 해석 순서
  * 변수 이름에서 시작
  * 단항/이항 연산자 해석
  * 후치 해석 -> 전치 해석 
  * 같은 전후 방향일때는 근치부터 해석

 * 해석 의미
  * 포인터 연산자 * => 무엇을 가리키는 포인터인가?
  * [] => 배열 요소의 타입은 무엇인가?
  * (함수인자) => 함수의 인자는 무엇인가? 리턴값은?

 * 해석 방법
  * 후치가 (함수인자) 이면 전치가 반환값의 타입을 의미함
  * 후치가 [배열] 이면 전치가 배열 요소의 타입을 의미함
  * 괄호안에 전치 *만 있으면 후치가 포인터의 타입을 의미함
  * [] 다음에 *가 나오면 ==> 배열인데 각각의 요소는 포인터 타입임
  * [] 다음에 (함수인자)가 나오면 ==> 각 배열의 요소는 함수 포인터
  * 포인터 연산자 * 다음에 []가 나오면 ==> 포인터이면서 배열을 가리키는 포인터
  * 포인터 연산자 * 다음에 (함수인자)가 나오면 ==> 포인터이면서 함수를 가리키는 포인터
 

 * 예제
{{{
int *f1(void)

후치 (void) => f1은 함수이고
전치 * => 포인터를 반환함
int => int 형의 포인터가 됨

}}}

 * 예제

{{{
int *a[4];

후치 a[4] => a는 4개의 요소를 가지는 배열
전치 * => 배열이면서 포인터 타입
int => 최종 데이터는 int 형

===> 따라서 a는 int의 포인터 4개의 배열의 이름

int d1,d2,d3;

a[0] = &d1;
a[1] = &d2;
a[2] = &d3;
}}}

 * 예제

{{{
int (*a)[4];

괄호가 있으므로 괄호안의 *를 먼저 해석한다.
* => a는 포인터이다
[4] => 포인터가 가리키는 것은 4개의 요소를 가지는 배열이다
int => 최종 데이터는 int 형이다.

===> 따라서 a는 int가 4개있는 배열을 가리키는 포인터 변수

int arr[3][4];
int (*a)[4];

a = arr;

===> a는 arr의 첫번째 요소를 가리킴, arr의 각 요소는 int [4] 이므로 같은 타입이다.
}}}

 * 예제

{{{
int *(*a[4])(int *);

1. 변수 이름 => a 
2. 후치 [4] => 4개의 요소를 가지는 배열
3. 전치 * => 배열의 각각의 요소의 타입은 포인터
4. 괄호 밖으로 나와서 후치 () => 포인터는 함수의 포인터 값임
5. () 안에서의 int * => 함수의 인자는 int *
6. 전치 int * => 함수의 반환 값은 int *

해석 결과
1. 함수 포인터 4개를 가지는 배열
2. 함수는 int 포인터를 인자로 가지고 int 포인터를 반환함

int *f1(int *a);
int *f2(int *a);

a[0] = f1, a[1] = f2;
}}}

 * 예제 4

{{{
int *(*(*p)[4])(int *);

예제 3의 배열을 가리키는 포인터
(*p)와 같이 선언된 포인터는 일단 (*p)를 q로 치환해서 생각해본 후, q를 가리키는 포인터로 p를 생각하면 좋다.

p = &a;
}}}






= 배열의 이해 =

 * '''배열의 이름의 정의 : '''첫번째 요소의 시작 주소'''
  * arr == &arr[0];

 * '''배열의 이름 + n : n 번째 요소의 시작 주소'''
  * arr+n == &(arr[n]);

 * '''배열의 이름[n] : n 번째 요소의 시작 주소에서 읽은 값'''
  * arr[n] == *(arr+n)

 * []의 의미 : 값을 읽어오기 ==> *와 같은 연산을 함 


 * 배열의 시작 주소 == 첫번째 요소의 시작 주소 : 주소 값은 같지만 의미는 다름
  * &arr == arr           ==>    배열의 시작 주소 == 첫번째 요소의 시작 주소
  * &arr + 1 != arr + 1   ==>    (배열의 시작 주소 + 배열의 크기) != (배열의 시작 주소 + 한 요소의 크기)
  * '''&arr 은 전체 배열을 의미하고  arr은 각 요소를 의미한다.'''

 * '''함수의 리턴값으로 배열이나 함수 포인터가 올 수 없다'''
  * int *a(int x)      ===> OK
  * int f(int x)[4]    ===> ERROR 리턴 값으로 배열이 될 수 없음  ===> int *f(int x)
  * int f(int x)(int)  ===> ERROR 리턴 값으로 함수가 될 수 없음  ===> int (*f(int a))(int)

 * '''함수는 배열의 요소가 될 수 없다'''
  * int a[4](int)  ===> int (*e[4])(int)



== 포인터를 요소로 가지는 배열 예제 ==


{{{

#include <stdio.h>

int *(*a[3])[4];

int main(void)
{

	int d1=0x11,d2=0x22,d3=0x33,d4=0x44;

	int *b1[4] = {&d1, &d2, &d3, &d4};

	a[0] = &b1;

	printf("a=>%X b=>%X\n", a, b1);
	printf("data=>%X %X %X %X\n\n", b1[0], b1[1], b1[2], b1[3]);

	printf("%X\n", a[0] );  // a[0] => address of b1
	printf("%X %X\n", *a[0], &b1[0] );	// *a[0] => address of b1[0]
	printf("%X %X\n", (*a[0])[0], &d1 );	// value of b1[0] => address of d1
	printf("%X\n", *(*a[0])[0] );	// data from the pointer of b1[0]

	printf("%X %X\n", (*a[0])[1], b1[1] );
	printf("%X %X\n", *(*a[0])[1], *b1[1]);

	printf("%X %X\n", **a[0], b1[0]);
	printf("%X %X\n", ***a[0], *b1[0]);
	printf("%X %X\n", ****a, **b1);


	return 0;
}
}}}


== 다단계 포인터 이해 연습 ==


 * 다음 프로그램을 실행하면 어떤 결과가 출력될까?


{{{
#include <stdio.h>

char *c[] = {"enter", "new", "point", "first"};
char **cp[] = {c+3, c+2, c+1, c};
char ***cpp = cp;

int main(void)
{
	printf("%s", **++cpp);
	printf("%s ", *--*++cpp+3);
	printf("%s", *cpp[-2]+3);
	printf("%s", cpp[-1][-1]+1);

	return 0;
}
}}}



== 포인터의 이름의 정의와 배열을 가리키는 포인터의 정의 ==


 * 포인터의 이름은 배열의 첫번째 요소의 주소이다.
  * a+1 -> 첫번째 요소의 주소 + 요소의 크기 -> 두번째 요소의 주소
  * *(a+1) -> 해당하는 요소의 값 읽기
  * a와 &a 의 값은 같지만 그 의미는 다르다.
  * &a는 배열을 가리키는 포인터의 주소 -> p=&a


{{{
#include <stdio.h>


int a[4] = {0x11, 0x22, 0x33, 0x44};


int main(void)
{


	do {
		printf("%X %X %X %X\n", a[0], a[1], &a[0], &a[1]);
		printf("%X %X %X\n", a, a+1, *a);
		printf("%X %X %X\n", *(a+1), a+2, *(a+2) );
		printf("%X %X %X %X\n", a, &a, a+1, &a+1);


	} while (0);


	do {

		int (*p)[4];
		p = &a;

		printf("%X %X %X\n", p, &p, a);
		printf("%X %X\n", *p, *p+1);
		printf("%X %X\n", **p, *(*p+1) );


	} while (0);


	return 0;
}
}}}



{{{

#include <stdio.h>


int *f1(int *a)
{
	return a;
}


int main(void)
{



	// array of pointers
	do {
		int d1, d2, d3;
		int *dp[4];

		dp[0] = &d1;
		d1 = 0x123;
		printf("%X\n", *dp[0]);

		printf("%X %X %X %X %X\n", dp, &dp, &dp[0], dp[0], &d1);
	} while (0);


	// pointer to arrays
	do {
		int arr[3][4] = {{0x11, 0x22, 0x33, 0x44}, {0x55, 0x66, 0x77, 0x88}, {0x99, 0xaa, 0xbb, 0xcc}};
		int (*a)[4];

		a = arr;

		printf("%X  %X %X %X %X\n", &a, a, arr, *a+1, *(*a+1));

	} while (0);



	do {
		int *(*a[4])(int *);	// array of function pointers
		int *(*(*p)[4])(int *);	// pointer to array of function pointers

		int d = 0xa33;


		printf("%d %d\n", sizeof(a), sizeof(p));

		printf("%x\n", f1);
		a[0] = f1;

		printf("%x %x\n", *f1(&d), *a[0](&d));
		
		p = &a;
		printf("%X %X\n", p, &a);
	} while (0);



	return 0;

}



}}}


{{{:

#include <stdio.h>


int main(void)
{

        // a means the array of pointers
        int *a[4];
        int b = 1;
        int c = 2;
        int d = 3;


        // gg means the pointer to an array
        int (*gg)[4];
        int hh[4] = {11, 22, 33, 44};
        unsigned int p2h = (unsigned int)hh;

        a[0] = &b;
        a[1] = &c;

        printf("%X %X %X\n", a, a[0], &b);
        printf("%d %d\n", *a[0], *a[1]);


        printf("%d\n", sizeof(gg));

        gg = &hh;
        // gg = hh; //warning, but work!

        printf("%X %X\n", gg, hh);
        printf("%d %d\n", *(*gg+2), (*gg)[2]);
        // (*gg) => hh
        // (*gg)[2] => hh[2]

        gg = (int (*)[4])p2h;
        printf("%X %X\n", gg, hh);


        return 0;
}



== 2차원 배열의 이해 예제 ==


 * 2차원 배열은 큰 배열안에 또 다른 배열이 있다는 그림으로 이해한다.
  * b1 : {0x1,0x2,0x3}의 주소
  * b1+1 : {0x4,0x5,0x6}의 주소
  * *(b1+1) : {0x4,0x5,0x6}의 주소에서 한 요소를 읽어오면 0x4의 주소가 됨
  * **(b1+1) : 0x4 의 값

 * 최대한 포인터 연산 식 *(b1+1) 과 같이 생각하지 말고 배열식 b1[1][0]으로 코딩하면 가독성이 좋아짐



{{{


#include <stdio.h>


typedef int IMG[2][3];


int b1[2][3] = {{0x1, 0x2, 0x3}, {0x4, 0x5, 0x6}};
int b2[2][3] = {{0x11, 0x12, 0x13}, {0x14, 0x15, 0x16}};
int b3[2][3] = {{0x21, 0x22, 0x23}, {0x24, 0x25, 0x26}};



// access video memory directly
//
//
// video memory ==> 0xb8000 and print character on screen
//
// #define VMEM ((unsigned short (*)[80])0xb8000)
// VMEM[line][column] = (unsigned short)'A'
//
//
unsigned short mem[25][80];

#define VMEM ((unsigned short (*)[80])mem)


int main(void)
{

	IMG *a[3];

	
	a[0] = &b1;
	a[1] = &b2;
	a[2] = &b3;

	VMEM[3][3] = 0xff12;
	printf("%X\n", VMEM[3][3]);

	/*
	 * a[0] = *a = *(a+0) = &b1 ==> address of array b1
	 * *a[0] = b1 = &b1[0] ===> address of the first entry of b1
	 * *(*a[0]) = (*a[0])[0] = *b1 = b1[0] ===> address of the first entry of {0x1, 0x2, 0x3}
	 * *(*(*a[0])) = (*a[0])[0][0] = b1[0][0] ===> first entry of {0x1, 0x2, 0x3}
	 *
	 *
	 * a[1] = *(a+1) = &b2 ==> address of array b2
	 * *a[1] = b2 = &b2[0] ===> address of the first entry of b2
	 * *(*a[1]) = (*a[1])[0] = *b2 = b2[0] ===> address of the first entry of {0x11, 0x12, 0x13}
	 * *(*(*a[1])) = (*a[1])[0][0] = b2[0][0] ===> first entry of {0x11, 0x12, 0x13}
	 *
	 *
	 * (*a[1])+1 = b2+1 = &b2[1] ===> address of second entry of b2
	 * *(*a[1]+1) = (*a[1])[1] = *(b2+1) = b2[1] ===> address of second entry of {0x11, 0x12, 0x13}
	 * *(*(*a[1]+1)+2) = (*a[1])[1][2] = b2[1][2] ===> first entry of {0x11, 0x12, 0x13}
	 *
	 */

	printf("addr of array b1: %X %X %X %X\n", a, *a, a[0], &b1);
	printf("b1: %X %X\n", b1, *a[0] );

	printf("addr of 1st entry of {1,2,3}: %X %X %X %X\n", b1[0], *(*a[0]), (*a[0])[0], *((*a[0])+0) );
	printf("addr of 2nd entry of {4,5,6}: %X %X %X %X\n", b1[1], *(*a[0]+1), (*a[0])[1], *((*a[0])+1) );
	printf("addr of 1st entry of {0x11,0x12,0x13}: %X %X %X %X\n", b2[1], *a[1]+1, (*a[1])[1], *((*a[1])+1) );

	printf("%X %X %X\n", *(*((*a[0])+1)+2), (*a[0])[1][2], b1[1][2]);
	printf("%X %X %X\n", *(*((*a[1])+1)+2), (*a[1])[1][2], b2[1][2]);

	return 0;
}

}}}

