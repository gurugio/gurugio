'''64비트-SMP 커널 만들기 - 4장 C 코드 시작과 스크린 출력'''


----

 * 작성자: 김기오 
 
 * 문서 소개
64비트-SMP 커널 만들기 강좌의 4장

----

 * 작성 일지

2009.2.24 김기오: 작성 시작


----

[[TableOfContents]] 

----

=  스크린 출력 =


== C 코드 시작 ==


롱모드 변환이 끝나면 C 코드로 작성된 커널이 실행된다. C 언어로 작성된 소스를 컴파일하면 ELF 포맷의 파일이 생성된다. 이 파일에서 파일 포맷에 관련된 정보를 제거하고 코드/데이터 섹션들만 뽑아내면 바이너리 이미지를 얻을 수 있다.

C 언어로 작성된 코드의 시작 부분은 main.c 파일의 start_kernel 함수이다. 링커 스크립트 파일에서 코드 섹션의 시작을 start_kernel 함수로 지정했기 때문이다. 따라서 main.c 파일을 만들고 start_kernel 함수만 만들면 C 코드가 시작될 수 있다.


=== 링커 스크립트 ===


C 코드는 가상 메모리 공간에서 실행된다. 따라서 컴파일러는 코드가 어느 메모리 주소를 사용해야 할지 결정할 수 있도록 해야 한다. 컴파일러가 만든 코드의 주소 지정이나 섹션 정보 등을 지정하는 일을 링커가 담당하는데, 개발자는 링커스크립트 파일을 이용해서 링커에게 세부 사항을 지시할 수 있다.

운영체제마다 디폴트 환경이 있어서 해당 운영체제에서 실행할 프로그램이나 라이브러리를 만들 때는 링커스크립트를 따로 만들어줄 필요가 없다. 배포판에 따라 다르지만 우분투의 경우 /usr/lib/ldscripts 디렉토리에 디폴트 링커스크립트 파일들이 저장되어 있다.

우리는 우리만의 운영체제에서 독자적인 실행 환경을 만들어야 하므로 링크스크립트 파일도 직접 만들어서 사용해야 한다. 링커 스크립트에 대한 전반적인 사항은 관련 HOWTO 문서를 참고해야 하지만 다음에 CaOS에 구현된 링커 스크립트 파일과 설명을 첨부한다. 스크립트에서 사용된 KERNEL_VMA 등의 상수는 Makefile에서 정의되고 실행 옵션으로 링커에게 전달된다.

{{{
OUTPUT_FORMAT(elf64-x86-64)  ELF 포맷, x86_64 프로세서
ENTRY(start_kernel) start_kernel 함수가 코드 섹션의 시작으로 배치할 것
SECTIONS
{
    . = KERNEL_VMA; 모든 섹션의 시작을 KERNEL_VMA라는 주소 값으로 지정

text, rodata 섹션이 가장 먼저 배치됨
    .text : AT(ADDR(.text) - KERNEL_VMA)
    {
        _code = .;
        *(.text)
        *(.rodata*)
        . = ALIGN(4096); 다음 섹션을 페이지 단위 정렬 시킴
    }

        _code_end = .;

data 섹션 배치
   .data : AT(ADDR(.data) - KERNEL_VMA)
   {
        _data = .;
        *(.data)
        . = ALIGN(4096);
   }

        _data_end = .;

   .ehframe : AT(ADDR(.ehframe) - KERNEL_VMA)
   {
       _ehframe = .;
       *(.ehframe)
        . = ALIGN(4096);
   }

   _ehframe_end = .;

   .bss : AT(ADDR(.bss) - KERNEL_VMA)
   {
       _bss = .;
       *(.bss)
       . = ALIGN(4096);
   }

   _bss_end = .;

여기까지가 커널 이미지의 끝
   _kernel_end = .;

주석은 제거함
   /DISCARD/ :
   {
        *(.comment)
   }

커널 스택 시작, 커널 이미지의 끝부분부터 여기까지가 스택으로 사용됨
   . = KERNEL_STACK_START;
}
}}}




=== 컴파일 ===

모든 컴파일은 Makefile 파일에서 담당한다.

Makefile을 열어보면 가장 먼저 커널이 시작되는 가상 메모리 주소와 스택 주소가 상수로 선언되어 있다. 이 선언이 컴파일러와 링커에게 동시에 전달된다. gcc 컴파일러는 -D 옵션으로 상수를 선언할 수 있고, ld 링커는 --defsym 으로 상수가 선언된다. nasm 어셈블러 또한 하드웨어 메모리 크기 MEMORY_SIZE 상수를 전달받는데 -D 옵션을 사용한다.

커널의 가상 주소에 대한 상수는 Makefile에서 정의할 필요는 없지만 링커 스크립트와 커널 소스에 똑같이 정의되야 하므로 만약 값이 수정된다면 양쪽을 수정해야하는게 불편하다. 따라서 Makefile에서 한번 정의해서 관리하기 편리하게 했다.

물리 메모리 크기를 계산하기 위해서는 바이오스가 확인한 값을 넘겨받는 것이 가장 확실한 방법이다. 하지만 지금은 qemu의 가상 환경에서 동작하므로 일단 물리 메모리 크기를 직접 정의해서 전달하는 것으로 구현해놓았다.

그 외에 다른 컴파일 옵션은 CFLAGS에 선언되어 있고, 링커의 옵션은 LFLAGS에 선언되어 있다.

BOOT_SRCS 선언은 부트로더 소스이고, C_SRCS는 커널 소스 중 C 코드 파일, ASM_SRCS는 커널 소스 중 어셈블리 파일을 정의한 것이다. 파일이 추가될 때마다 이 선언부의 뒤에 파일 이름을 써넣으면 된다.

Makefile은 다음과 같은 순서로 CaOS를 빌드한다.

1. .c 파일 컴파일
2. .asm 파일 어셈블
3. ld-script.ld를 이용한 링크 실행: kernel.tmp
4. objcopy를 이용해서 바이너리 이미지 생성: kernel.img
5. nm으로 심볼 테이블 생성: system.map
6. 커널의 디스어셈블 코드 disasm.txt
7. 커널 이미지 kernel.img 의 크기 계산
8. 부트로더 bootsect.asm, setup.asm 어셈블: bootsect.img, setup.img
9. 부트로더와 커널 이미지를 합쳐서 qemu용 이미지 파일 생성: floppy.img
10. boch 에뮬레이터에서 사용되는 1.44MB 크기의 플로피 이미지 생성: boch.img
11. cscope용 DB 파일 생성: cscope.out


== 스크린 관리 ==


스크린을 초기화하는 일은 screen.c 파일의 함수들이 담당한다. 비디오 메모리와 커서의 위치 정보를 관리하면서 화면을 스크롤하는 역할 등을 담당한다. 문자를 출력하는 코드를 printf.c 파일로 분리해서 스크린 장치를 관리하는 모듈과 메세지 출력 모듈을 분리했다. 추후에 장치 드라이버의 관리 기능을 추가할 경우를 고려하기 위해서이고, 또 메세지 출력을 스크린이 아닌 시리얼이나 다른 장치로 출력할 수도 있기 때문이다.


=== screen_info 구조체 ===


스크린 정보를 관리하는 screen_info 구조체는 다음과 같이 정의되어 있다.


{{{
 24 struct screen_info {
 25     size_t cursor_offset;
 26     volatile u16 *video_mem;
 27
 28 };
}}}

커서의 위치 정보는 X,Y 좌표로 관리할 수도 있고, 선형적인 오프셋 주소로 관리할 수 있는데 여기에서는 비디오 메모리의 시작 주소를 video_mem 변수에 저장하고 비디오 메모리의 시작 주소에서 얼마의 오프셋 위치에 커서가 있는지에 대한 정보를 cursor_offset 변수에 저장한다.

비디오 메모리에서 한 문자를 출력하기 위해서 2바이트를 사용한다. 2바이트 중에서 상위 바이트는 문자의 속성, 배경 색이나 문자의 색 등의 값을 쓰고 하위 바이트는 아스키 코드 값을 쓴다. 예를 들어 검은 바탕에 흰 글씨의 'A'를 쓰고 싶다면 0x0740 값을 비디오 메모리에 쓰면 된다.


=== init_screen 함수 ===


init_screen 함수는 스크린 출력을 위해 screen_info 구조체를 초기화하고 화면에 출력된 바이오스의 메세지를 모두 지운다. 물리 메모리 주소 0xB8000 값은 롱모드로 진입하면서 0xFFFF_8000_000B_8000 이 되므로 이 값을 screen_info 구조체의 video_mem 변수에 저장한다.

set_cursor 함수는 함수 인자로 받은 오프셋 값을 screen_info 구조체에 저장하고 CRT 장치의 출력 포트에 좌표 값을 쓴다. CRT 포트 주소는 0x3D4, 0x3D5 인데 다음과 같이 오프셋 값의 상위 바이트를 먼저 쓰고, 그 다음 하위 바이트 값을 쓰면 화면의 커서가 오프셋의 위치로 이동한다.

{{{
 72         // port 0x3d4
 73         dwTemp = (u8)(screen_info.cursor_offset >> 8);
 74         __outb((unsigned short)0x3d4, (unsigned char)0x0e);
 75         __outb((unsigned short)0x3d5, (unsigned char)dwTemp);
 76
 77         dwTemp = (u8)(screen_info.cursor_offset & (u8)0xff);
 78         __outb((unsigned short)0x3d4, 0x0f);
 79         __outb((unsigned short)0x3d5, (u8)dwTemp);
}}}


=== scroll_screen 함수 ===


화면에 글자가 모두 차면 가장 윗줄을 지우고 나머지 내용을 한줄씩 위로 올리는 횡스크롤를 하게 된다. 이런 스크롤을 처리하는 함수가 scroll_screen 함수이다. X 라인만큼 스크롤하는 동작은 화면 상위의 X개 라인을 지우고, 나머지 라인들을 화면 첫 라인으로 옮긴 후, 화면 아래 옮겨진 부분의 글자들을 지우는 방식으로 진행된다.

화면에 글자를 출력할 때마다 커서를 한칸씩 옮기게 되므로 set_cursor 함수가 호출된다. set_cursor 함수는 현재 커서가 스크린의 최대 라인 밖으로 위치하게 되면 스크롤 함수를 호출해서 한줄씩 스크롤되도록 한다.


== 메세지 출력 ==


printf 함수를 구현하기 위해서 먼저 다음 함수들을 구현해야 한다.

 * putchar: 한글자 출력하고 커서 전진
 * delchar: 커서 후진하고 한글자 삭제
 * print_hex: 정수 값을 16진수로 표현한 문자열로 변환
 * print_decimal: 정수 값을 10진수로 표현한 문자열로 변환
 * vsprintf: printf에 전달된 포맷 문자열과 함수 인자들을 이용해서 포맷 문자열을 완성된 문자열로 변환

대부분의 문자열 처리 함수들은 많은 자료와 예제가 있으므로 구현하기 어렵지 않다. 그런데 printf의 가변 인자를 처리하는 방식에서 고려해야 할 사항이 있다. 32비트 i386 프로세서와 64비트 x86_64 계열 프로세서가 차이가 있기 때문에 가변 인자 처리 관련 매크로를 정확하게 이해해야 한다.

일반적인 i386 개발 환경에서는 가변인자를 다음과 같이 처리한다.

{{{
typedef char *  va_list;

#define _INTSIZEOF(n)   ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) )
#define va_start(ap,v)  ( ap = (va_list)&v + _INTSIZEOF(v) )
#define va_arg(ap,t)    ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )
#define va_end(ap)      ( ap = (va_list)0 ) 
}}}

그런데 이 매크로의 기본 전제는 함수 인자들이 스택에 저장되어 있고, 이 스택에서 각 인자의 크기만큼 포인터를 옮기면서 메모리를 읽는 것으로 가변 인자를 읽는다. C 언어의 표준 호출 규약의 함수 인자 전달 방식 (C Calling Convection)에 따라서 당연히 옳바른 방식이다. 그런데 x86_64 프로세서용 컴파일러로 컴파일된 C 코드를 디스어셈블해보면 스택에 인자를 저장하는 것이 아니라 레지스터에 저장한다. x86_64 프로세서를 최초로 디자인한 AMD의 ABI 문서 (http://www.x86-64.org/documentation/abi-0.98.pdf)를 읽어보면 함수의 인자를 전달 할 때는 rdi, rsi, rdx, rcx, r8, r9 순으로 인자를 전달하고 그 이상의 인자만을 스택에 저장해서 전달하라고 정의하고 있다. 즉 모든 인자가 스택에 저장되는 것이 아니다.

x86_64에서 가변 인자 처리를 직접 구현하기 위해서는 위와 같이 스택에 있는 함수 인자를 읽어오는 중간 함수를 어셈블리로 만들어서 레지스터에 있는 함수 인자를 스택에 저장해야 한다. 하지만 만약 gcc만을 사용해서 개발한다고 가정한다면 gcc에서 제공하는 built-in 함수를 사용해서 간단하게 작성할 수가 있다. 결국 CaOS에서는 다음과 같이 가변 인자 처리 매크로를 구현했다.

{{{
//
// x86_64 processor saves function-parameters in registers,
// so that gcc built-in functions are used like this.
//
typedef __builtin_va_list va_list;
#define va_start(v,l) __builtin_va_start(v,l)
#define va_arg(v,l) __builtin_va_arg(v,l)
#define va_end(v) __builtin_va_end(v)
}}}



메세지 출력 함수의 테스트를 위해서 start_kernel 함수에서는 다음과 같이 printf 함수를 호출한다. 먼저 다양한 정수들을 출력해본다. 십진수 값 0,1 을 출력하면 동일하게 0,1으로 출력된다. 그런데 음수 값 -3U, -4L 과 -5를 출력하면 각각 4294967293, -4, 4294967291로 출력된다. 원인을 확인하기 위해서 스택 값을 확인했더니 -4L로 64비트 long 타입으로 명확하게 선언을 해야만 64비트 레지스터 전체를 사용하는 것으로 보인다. -3U은 4바이트 int 타입으로 처리되고, 마찬가지로 -5 또한 4바이트 int 타입으로 처리된다. x86_64에서 레지스터 크기가 8바이트인데도 왜 8바이트 타입이 디폴트가 아닌지 이유를 모르겠다.

{{{
 52     // 6 arguments are stored in register,
 53     // and others are stored in stack memory.
 54     // Therefore if there is not type-specifier,
 55     // compiler cannot know how many byte is valid data in stack.
 56     // If arguments 6UL, 7UL is 6, 7 without type-specifier,
 57     // output data is the thrash data from stack with 6 at al or dl register.
 58     caos_printf("Hello, CaOS. Test printf <%d,%d,%d,%d,%d,%d,0x%x>\n", 0, 1, -3U, -4L,     -5, 6UL, 0xaUL); // variable list
 59
 60     caos_printf("size int=%d, long=%d, long long=%d\n", sizeof(int), sizeof(long), sizeof(long long));
}}}




== 참고 자료 ==

 * 역시 모든게 다 있는 백화점 osdev 위키: http://wiki.osdev.org/Printing_to_Screen
 * AMD64용 ABI: http://www.x86-64.org/documentation/abi-0.98.pdf
 * kkamagui 블로그: http://kkamagui.tistory.com/635
