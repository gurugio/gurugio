'''64비트-SMP 커널 만들기 - 7장 페이지 관리'''


----

 * 작성자: 김기오 
 
 * 문서 소개
64비트-SMP 커널 만들기 강좌의 7장

----

 * 작성 일지

2009.3.2 김기오: 작성 시작


----

[[TableOfContents]] 

----

= 페이지 관리 =


== 페이지 테이블 재설정 ==


setup.asm 코드에서 롱모드 부팅을 위해 페이지 테이블을 만들고 CR0 레지스터의 PG 비트를 셋팅해서 페이징 기능을 시작했다. 부팅 단계에는 전체 메모리에 대한 처리를 할 필요가 없이 부팅에 필요한 크기만큼(0.05버전은 8MB 설정) 페이지 테이블을 만들기 때문에 커널에서는 전체 물리 메모리에 대한 페이지 테이블을 만들어서 모든 물리 메모리를 사용할 수 있도록 해야 한다.


=== 페이지 테이블 자료 타입 ===


64비트 롱모드에서 페이지 테이블의 엔트리는 64비트 크기를 가진다. pgtable.h 파일에서 페이지 테이블 관련 데이터를 정의하고 있는데 각각의 페이지 테이블 엔트리를 다음과 같이 정의하고 있다. 구조체 형태로 정의했지만 그 속은 8바이트 변수일 뿐이다. 페이지 테이블 엔트리에도 비트별로 다양한 속성들이 있어서 테이블을 만들 때마다 비트별로 설정해주어야 하지만, 만약 여러개의 변수로 정의한다면 페이지 테이블을 접근할 때마다 여러번 나누어서 읽고 써야하므로 속도에 문제가 생긴다. 페이지 테이블의 처리는 페이지 폴트 예외가 발생하거나 컨텍스트 스위칭과도 연관이 많고 프로세스를 생성할 때도 많이 호출되므로 빠른 처리가 필요한 부분이므로 하나의 변수로 만들어서 처리한다.

{{{
 82 /* entry format of page-table */
 83 // In x86-64 arch, entry of every paging structure is 64bit
 84 typedef struct { unsigned long long pte; } pte_t;
 85 typedef struct { unsigned long long pmd; } pmd_t;
 86 typedef struct { unsigned long long pud; } pud_t;
 87 typedef struct { unsigned long long pgd; } pgd_t;
 88 typedef struct { unsigned long long pgprot; } pgprot_t;
}}}

페이지 테이블 엔트리에 값을 쓰는 것은 다음과 같이 페이지 테이블마다 하나의 인라인 함수로 만들어준다. 각 함수의 인자는 엔트리의 포인터와 설정할 값이 된다.

{{{
158 static inline void set_pgd(pgd_t *dst, pgd_t val)
159 {
160     pgd_val(*dst) = pgd_val(val);
161 }

196 static inline void set_pud(pud_t *dst, pud_t val)
197 {
198     pud_val(*dst) = pud_val(val);
199 }

232 static inline void set_pmd(pmd_t *dst, pmd_t val)
233 {
234         pmd_val(*dst) = pmd_val(val);
235 }

271 static inline void set_pte(pte_t *dst, pte_t val)
272 {
273     pte_val(*dst) = pte_val(val);
274 }
}}}

이 외에도 테이블 엔트리를 쉽게 다루기 위해 여러가지 매크로 함수나 상수들을 정의하고 있는데 모두 리눅스 커널 코드와 동일하게 만들었으므로 세부 사항을 알기 위해서는리눅스 커널 관련 자료를 참고한다.


=== 페이지 테이블 속성 ===


페이지 테이블을 만드는 일은 page.c 파일의 paging_init 함수에서 실행한다. 시스템의 물리 메모리 크기를 인자로 전달받아서 필요한 만큼의 페이지 테이블들을 설정하는 일을 한다.

페이지 테이블을 만들기 위해서 가장 먼저 페이지 테이블 엔트리에 쓸 속성들을 결정해야 한다. 기본적으로 다음 7가지의 속성을 결정해야 한다.

 * Present: 페이지의 내용이 유효한지를 나타낸다. 페이지 테이블이 저장되는 모든 페이지는 Present 비트가 1로 셋팅되야 한다.
 * Read/Write: RW비트가 1이면 읽기와 쓰기가 모두 가능한다는 표시이다.
 * User/Supervisor: 현재 커널이 사용할 테이블이므로 0으로 설정한다.
 * PWT: 캐시의 동작 방식을 write-through 방식으로 설정하기 위해 0으로 설정한다.
 * PCD: 페이지 레벨 캐시 동작을 활성화하기 위해 0으로 설정한다. 해당 페이지의 내용이나 페이지 테이블의 접근이 모두 캐시에 저장된다.
 * Accessed: 프로세서가 페이지의 내용을 읽거나 쓸 때 자동으로 셋팅해주므로 설정하지 않는다.
 * Dirty: 프로세서가 페이지에 내용을 쓸 때 자동으로 셋팅해주므로 설정하지 않는다. (PTE 테이블만 해당)

{{{
228     //
229     // enable cache by clearing PCD bit!!
230     // enable write-back cache-policy by clearing PWT bit!!
231     // RW: page table or page is readable & writable
232     // Present: page tables are currently loaded in physical memory
233     //
234     u64 page_attr = (_PAGE_RW + _PAGE_PRESENT);
}}}


=== 물리메모리 전체를 커널 영역으로 매핑 ===

paging_init 함수에서는 2단계로 페이지 테이블을 만든다. 먼저 시스템의 모든 물리메모리를 선형주소 0xFFFF_8000_0000_0000 으로 매핑하는 단계가 있고, 그 다음으로 APIC와 BIOS 등에 대한 데이터를 읽을 수 있는 영역에 대한 매핑이 있다. 각각의 경우에 페이지 속성이 달라지므로 주의해야 한다.

먼저 시스템의 물리 메모리 전체를 커널의 주소 공간에 매핑시킨다. CaOS에서 커널이 시스템의 모든 물리 메모리에 접근할 수 있도록 하고 유저 프로세스와 데이터를 주고 받거나 디스크의 프로그램을 메모리에 로드하는 등의 일을 하게 한다. 

물리 메모리를 커널의 주소 공간에 매핑하기 위해서 가장 먼저 페이지 테이블부터 새로 만든다. paging_init 함수에서는 현재 시스템의 물리 메모리 크기를 매핑하기 위해 필요한 페이지 테이블의 갯수를 계산한다.

{{{
237     // one PUD table has 512 entries and
238     // one entry can cover 1G
239     pud_count = phy_mem_size / (512 * 1024);
240     if (pud_count == 0)
241         pud_count = 1;
242
243
244     // one PMD table => 1G, one entry => 2M
245     pmd_count = phy_mem_size / (1024);
246     if (pmd_count == 0)
247         pmd_count = 1;
248
249
250     // one PTE table => 2M, one entry => 4K page
251     pte_count = phy_mem_size / 2;
252     if (pte_count == 0) {
253         caos_printf("FATAL ERROR in PAGING-TABLES BUILDING");
254         halt();
255         return;
256     }
257
258
259     // How many pages are there?
260     page_count = phy_mem_size * 256; // 256 pages per 1MB
261
262
263
264     // allocate only one PGD
265     pgd = (pgd_t *)alloc_bootmem(1);
266     pud = (pud_t *)alloc_bootmem(1);
267
268
269     // allocate page-tables, each address is linear address.
270     pmd = (pmd_t *)alloc_bootmem(pmd_count);
271     pte = (pte_t *)alloc_bootmem(pte_count);
}}}

한개의 페이지는 4K 크기를 가진다. 따라서 PTE 테이블에서 한개의 엔트리는 4K 메모리 공간을 매핑하고 PTE 테이블은 512개의 엔트리를 가지므로, 한개의 PTE 테이블은 4K*512=2M 메모리를 매핑한다. 마찬가지 방식으로 계산하면 한개의 PMD 테이블은 2M*512=1G 메모리를 매핑하고, 한개의 PUD 테이블은 1G*512=512G 메모리를 매핑한다. PGD 테이블은 512G*512=256T 메모리를 매핑하므로 테이블의 갯수를 계산할 필요없이 PGD와 PUD 테이블은 항상 1개의 테이블만 만들어주면 충분하다. 페이지 테이블을 저장할 페이지 프레임을 각각의 갯수에 맞게 부팅 메모리 관리자로부터 할당받는다. 만약 테이블이 여러개가 필요하다면 부팅 메모리 관리자는 서로 연결되어있는 여러 페이지를 할당해줄 것이다. 따라서 테이블의 갯수와 시작 주소만 알면 모든 페이지 테이블에 접근할 수 있다.

예를 들어 1G 바이트의 물리 메모리를 가진 시스템이 있다면 1개의 PGD와 1개의 PUD, 1개의 PMD, 512개의 PTE가 생성된다.

페이지 테이블을 저장할 메모리를 할당받았으면 각각의 페이지 테이블을 셋팅해야 한다. 가장 먼저 최상위 페이지 디렉토리인 PGD를 셋팅한다. 커널의 주소 공간은 0xFFFF_8000_0000_0000 번지에서 시작된다. PGD에서 하나의 엔트리가 512G를 매핑하는데 이것을 16진수로 표현하면 0x80_0000_0000 이 된다. 0x80_0000_0000 에 0x100을 곱하면 0x8000_0000_0000 이 되므로 PGD[0x100] 엔트리가 선형 메모리 주소 0xFFFF_8000_0000_0000 ~ 0xFFFF_8080_0000_0000 을 매핑한다. 결국 PGD[0x100] 엔트리에만 PUD 테이블의 주소를 셋팅한다.

{{{
277     // clear every entries except PGD[0x100]
278     // PGD[0x100] => linear address 0xFFFF800000000000
279     for (l=0; l<0x100; l++)
280         set_pgd(pgd+l, __pgd(0));
281
282     set_pgd(pgd+0x100, __pgd(__pa(pud) + page_attr) );
283
284     for (l=0x101; l<0x200; l++)
285         set_pgd(pgd+l, __pgd(0));
}}}

PUD 테이블에는 PMD 테이블의 주소를 저장한다. PMD 테이블이 여러개일지라도 연속적인 페이지에 저장되어 있으므로 PMD 테이블의 시작 주소에 페이지 크기를 더하면 각각의 PMD 테이블의 주소를 알아낼 수 있다. PMD 테이블도 마찬가지로 PTE 테이블의 물리 주소를 저장해준다.

{{{
288     // set entries in PUD
289     for (l = 0; l < pmd_count; l++) {
290         set_pud(pud + l, __pud(__pa(pmd + (l*PAGE_SIZE)) +  page_attr) );
291     }
292
293
294     // set entries in PMD
295     for (l = 0; l < pte_count; l++) {
296         set_pmd(pmd + l, __pmd(__pa(pte) + (l*PAGE_SIZE) +  page_attr) );
297     }
}}}

PTE 테이블에는 물리 페이지 프레임의 시작 주소를 써주어야 한다. 시스템의 모든 물리 메모리의 시작 주소는 0, 0x1000, 0x2000 ... 으로 계산되므로 다음과 같이 0x1000 에 페이지 번호를 곱하기만 하면 시작 주소를 알 수 있다.

{{{
299     // set entries in PTE
300     for (l = 0; l < page_count; l++) {
301         set_pte(pte + l, __pte(l*PAGE_SIZE +  page_attr) );
302     }
}}}

예를 들어 1G 바이트의 물리 메모리를 가진 시스템이 있다면 1개의 PGD와 1개의 PUD, 1개의 PMD, 512*512개의 PTE가 생성된다. 그리고 PGD[0x100] 에 PUD의 물리 주소가 저장되고, PUD[0]에 PMD의 물리 주소가 저장된다. PMD 테이블은 0x0 엔트리부터 0x1FF 엔트리가 모두 PTE 테이블의 주소로 셋팅되고 각각의 PTE 엔트리들은 0x0, 0x1000, 0x2000, ... ... 0x3FFF_F000 (1G - 1page) 의 주소로 셋팅될 것이다.

이로서 시스템의 모든 물리 메모리를 커널 주소 공간에 매핑하였다.


=== 바이오스 영역을 가상 메모리 공간으로 매핑 ===


바이오스는 시스템에있는 IO APIC와 Local APIC에 대한 정보를 바이오스 내부의 PROM에 저장하고 있다. 이 PROM은 물리 메모리 0xFEC0_0000 ~ 0x1_0000_0000 영역으로 매핑되어 있다. 이 영역을 선형 주소 0xFFFF_8000_C000_0000 으로 매핑해서 사용한다.

PROM의 영역은 20M 크기이므로 10개의 PTE 테이블을 만든다. 그리고 물리 메모리가 매핑된 여역과 거리를 두기 위해서 PUD[3] (0xC000_0000) 영역으로 매핑한다. 이 영역에 값을 쓸 수는 없고 읽기만 가능하며, 일반적인 메모리가 아니므로 캐시를 비활성화한다.

{{{
314     //
315     // reserve area - APIC, memory-mapped IO devices, BIOS PROM
316     //
317     // IO APIC: 0xFEC00000 -> linear 0xFFFF8000C0000000
318     // Local API: 0xFEE00000 -> linear 0xFFFF8000C0200000
319     //
320
321     // disable cache, only read
322     page_attr = (_PAGE_PRESENT + _PAGE_PCD);
323
324     pmd_reserv = (pmd_t *)alloc_bootmem(1);
325     pte_reserv = (pte_t *)alloc_bootmem(10);
326
327     // one PUD entry => 1G => 0x4000_0000
328     // PUD[3] => 0xC000_0000
329     set_pud(pud+3, __pud(__pa(pmd_reserv) + page_attr));
330
331     // 10 PMD entries => 20M => 0x140_0000
332     for (l=0; l<10; l++)
333         set_pmd(pmd_reserv + l, __pmd(__pa(pte_reserv) + (l*PAGE_SIZE) + page_attr));
334
335     // physical address 0xFEC0_0000 ~ 0xFFFF_F000
336     // => linear address 0xFFFF_8000_C000_0000 ~ 0xFFFF_8000_C13F_F000
337     for (l=0; l<512*10; l++)
338         set_pte(pte_reserv + l, __pte((0xFEC00000 + l*PAGE_SIZE) + page_attr));
}}}

새롭게 사용할 PMD와 PTE 테이블을 만들고 PUD[3]와 PMD[10:0]을 설정하고 PTE 테이블 엔트리에 0xFEC0_0000 부터 20M 크기 영역의 물리 주소를 써준다.


=== CR3 레지스터 재설정 ===


아직까지 CR3 레지스터에는 setup.asm 코드에서 설정한 값이 저장되어 있다. 따라서 다음 코드와 같이 CR3의 값을 새롭게 만든 페이지 테이블의 물리 주소로 바꾼다.

{{{
343     //
344     // CR3 has the physical address of process's PGD
345     // enable page-level cache and write-back policy
346     //
347
348     cr3_val = read_cr3();
349     cr3_val = __pa(pgd);
350     cr3_val &= ~(X86_CR3_PCD | X86_CR3_PWT);
351     write_cr3(cr3_val);
352
353
354     // CR3 is changed that means address space is modified.
355     // Therefore TLB and cache must be flushed.
356     flush_cache();
357     __flush_tlb();
358
359
360     //
361     // swapper_pg_dir is PGD of kernel
362     //
363     swapper_pg_dir = pgd;
}}}

메모리맵이 바꼈으므로 캐시의 내용을 새롭게 채워넣어야 한다. 캐시에는 어떤 물리 메모리 주소가 어느 선형 주소로 매핑되는지에 대한 내용과 해당 물리 메모리의 값이 저장되어 있으므로 이 캐시를 그대로 사용하면 엉뚱한 값이 읽혀진다. 따라서 모든 프로세서의 캐시를 강제로 무효화하는 어셈블리 명령어 wbinvd 를 실행하는 인라인 함수 flush_cache를 호출한다. TLB 캐시를 무효화하는 명령어를 없지만 CR3 레지스터에 쓰기 동작이 실행되면 TLB 캐시가 무효화된다. __flush_tlb_all 함수는 TLB 캐시에 저장된 글로벌 페이지에 대한 캐시까지도 무효화시킨다.


=== 메모리 매핑 테스트 ===


다음은 페이징 기능이 제대로 실행되었는지를 알아보는 디버깅 코드이다. 페이지 테이블 엔트리를 몇개 출력해보고 시스템의 마지막 페이지에 값을 쓰고 읽어서 메모리 접근이 잘 실행되는지 확인한다. 만약 메모리 매핑에 문제가 있다면 페이지 폴트 예외가 발생하거나 시스템이 재부팅될 것이다.

{{{
366 #ifdef DEBUG
367     {
368         u64 *entry = (u64 *)0xFFFF800000203000;
369
370         caos_printf("PML4[0x100]=%x, PDP[0]=%x\n PDE[0]=%x, PTE[0]=%x\n",
371                 *(entry +0x100), *(entry+512), *(entry+1024), *(entry+1536));
372
373         entry = (u64 *)(0xFFFF800000000000 + phy_mem_size * 0x100000 - 0x1000);
374
375         *entry = 0x123456789ABCDEF0;
376         caos_printf("Paging test: 0x%x == 0x123456789ABCDEF0??\n", *entry);
377
378     }
379 #endif
}}}


== 페이지 프레임 관리 테이블 ==


페이지 단위 메모리 할당을 위해서는 먼저 시스템의 물리 페이지들을 관리할 수 있어야 한다. 각각의 물리 페이지 프레임이 사용중인지에 대한 상태나 몇개의 프로세스가 접근하고 있는지, 어떤 선형주소에 매핑되어 있는지 등에 대한 정보들을 관리하는 페이지 디스크립터를 만든다. CaOS에는 page.h 파일의 struct page 구조체를 페이지 디스크립터로 사용한다.

struct page 구조체
 * struct list_head list: 같은 zone 에 속한 페이지들의 리스트
 * size_t private: 하나의 버디에서 첫번째 페이지일 때 자신이 속한 버디가 몇개의 페이지로 이루어진 버디인지를 나타냄 (order 단위)
 * size_t index: 페이지 번호
 * size_t count: 참조 카운터
 * flag_t flags: 상태 플래그
 * void * virtual: 이 페이지가 매핑된 선형 주소
 * struct zone *page_zone: 이 페이지가 속한 zone
 * void *slab: 이 페이지가 할당된 slab

page 구조체의 배열이 곧 페이지 프레임 관리 테이블이 된다. CaOS에서는 다음과 같이 전역 변수로 mem_map 이라는 이름의 포인터를 만들고, 부팅 메모리를 할당받아서 배열을 만들었다.

{{{
 37 //
 38 // Page descriptor table
 39 //
 40 struct page *mem_map;
}}}

{{{
16     page_count = (phy_mem_size * 0x100000)/PAGE_SIZE;
117     mem_map_size = page_count * sizeof(struct page) + 11;
118     mem_map_page = PAGE_ALIGN(mem_map_size) / PAGE_SIZE;

126     //
127     // Mem_map is allocated in kernel-booting memory (kernel heap).
128     //
129
130     mem_map = (struct page *)alloc_bootmem(mem_map_page);
}}}

다음은 mem_map 테이블을 초기화하는 코드이다. 참조 카운터를 0으로 설정하고, 페이지 인덱스를 순서대로 셋팅해준다. 지금은 모든 페이지 프레임이 커널 영역으로 매핑된 상태이므로 커널 영역의 선형 주소를 써준다.

{{{
137     //
138     // initialized mem_map table
139     //
140     virtual_addr = PAGE_OFFSET;
141     for (l=0; l<page_count; l++) {
142         INIT_LIST_HEAD(&mem_map[l].list);
143         mem_map[l].index = l;
144         mem_map[l].count = 0;
145         mem_map[l].flags = 0;
146         mem_map[l].private = -1;
147         mem_map[l].virtual = (void *)virtual_addr;
148         virtual_addr += 0x1000;
149     }
}}}

마지막으로 부팅 메모리 할당자에서 할당된 메모리와 바이오스 영역의 메모리의 참조 카운터를 1로 셋팅해서 이미 사용중임을 표시한다. 이제부터는 mem_map 을 이용한 버디 시스템으로 페이지 할당을 시작하므로 mem_map_init 함수가 실행된 이후부터는 부팅 메모리 할당자를 사용할 수 없다.

{{{
152     //
153     // set busy pages which are allocated for kernel-booting memory
154     //
155     // BIOS booting data : 0x0 ~ 0x1000 (0th page frame)
156     // BIOS & ISA video  : 0x9F000 ~ 0x100000
157     // kernel image      : 0x100000(0x100th page)~KERNEL_START_STACK
158     // kernel heap       : KERNEL_START_STACK ~ bootmem_page_index (page number)
159     //
160
161
162     //----------------------------------------------------------------
163     // for future works...
164     // struct resource data-structure must be defined in setup.h
165     // and BIOS are will be managed as resource
166     // Then busy-page couting will be modified as dynamic counting.
167     //----------------------------------------------------------------
168     mem_map[0].count = 1;
169
170     for (l=0x9f; l<0x200; l++)
171         mem_map[l].count = 1;
172
173     for (l=bootmem_page_start; l<bootmem_page_index; l++)
174         mem_map[l].count = 1;
}}}


= 참고 자료 =

 * 인텔 매뉴얼 Intel64 and IA-32 architectures software developer's manual Vol. 3A - 이놈을 죽어라 봐야 함
