'''최적화 장벽의 이해를 위한 실험'''


[[TableOfContents]] 


= 실험 1. volatile 변수와 최적화 장벽의 관계 =


다음 2개의 C 코드는 volatile 변수에 접근하는 예제이다.


최적화 장벽이 없다면 volatile 변수를 처리하는 코드 사이에도 최적화 처리를 한다. 따라서 volatile 선언은 volatile 변수를 처리하는 코드 부분만 최적화 장벽 역할을 하고, 다른 코드와는 상관이 없음을 알 수 있다. 

따라서 최적화 장벽과 volatile 변수는 별개이며 volatile 변수가 최적화 장벽 역할을 하는 것은 아니라는 결론이다.



== 1) 최적화 장벽이 없을 때 ==



{{{
  7 int main(void)
  8 {
  9     volatile int vola;
 10
 11     vola = 5678;
 12     
 13     vola = 5555;
 14
 15     return 0;
 16 }
}}}

{{{
gurugio@gioserver:~$ gcc -Wall -S -O2 a.c
gurugio@gioserver:~$ cat a.s
        .file   "a.c"
        .text
        .p2align 4,,15
.globl main
        .type   main, @function
main:
        leal    4(%esp), %ecx
        andl    $-16, %esp
        pushl   -4(%ecx)
        pushl   %ebp
        movl    %esp, %ebp
        pushl   %ecx
        subl    $16, %esp
        movl    $5678, -8(%ebp)
        xorl    %eax, %eax             -> 메모리 접근 사이에 레지스터 계산을 넣어서 최적화!!
        movl    $5555, -8(%ebp)
        addl    $16, %esp
        popl    %ecx
        popl    %ebp
        leal    -4(%ecx), %esp
        ret
        .size   main, .-main
        .ident  "GCC: (GNU) 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)"
        .section        .note.GNU-stack,"",@progbits
}}}

== 2) 최적화 장벽이 있을 때 ==


최적화 코드가 장벽 이후로 넘어감

{{{
  4 int main(void)
  5 {
  6      volatile int vola;
  7
  8      vola = 5678;
  9      vola = 5555;
 10     asm volatile ("" ::: "memory");
 11
 12      return 0;
 13  }
}}}

{{{
gurugio@gioserver:~$ gcc -Wall -S -O2 a.c
a.c: In function ‘main’:
a.c:10: warning: unused variable ‘normal’
gurugio@gioserver:~$ cat a.s
        .file   "a.c"
        .text
        .p2align 4,,15
.globl main
        .type   main, @function
main:
        leal    4(%esp), %ecx
        andl    $-16, %esp
        pushl   -4(%ecx)
        pushl   %ebp
        movl    %esp, %ebp
        pushl   %ecx
        subl    $16, %esp
        movl    $5678, -8(%ebp)
        movl    $5555, -8(%ebp)
        addl    $16, %esp
        xorl    %eax, %eax          -> 코드 재배치 취소!!
        popl    %ecx
        popl    %ebp
        leal    -4(%ecx), %esp
        ret
        .size   main, .-main
        .ident  "GCC: (GNU) 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)"
        .section        .note.GNU-stack,"",@progbits
}}}






= 실험 2. 일반 전역 변수와 최적화 장벽의 관계 =


다음 실험은 전역 변수 처리의 최적화와 최적화 장벽의 관계를 알아보기 위한 코드이다.


메모리의 읽기와 쓰기 사이에 최적화 장벽을 두었다. 최적화 장벽이 없을 때는 변수에 값을 쓰는 것을 최적화했다. 하지만 최적화 장벽이 있을 때는 변수 값을 쓸 때 레지스터에 있는 값을 메모리에 기록하고, 변수 값을 읽을 때는 레지스터 값이 아니라 메모리에서 다시 값을 읽어오는 것을 알 수 있다.


 * 결과 1. 최적화 장벽이 있으면 마치 volatile 변수인 것과 같이 메모리 읽기/쓰기를 반복해서 처리함
 * 결과 2. 최적화 장벽 이전에 읽은 값이 레지스터에 있더라도 장벽 이후에 다시 읽어온다.
 * 결과 3. 동기화를 위한 변수의 읽기/쓰기에는 volatile 이 아니라 최적화 장벽을 써야 한다. 그래야 어떠한 경우에서도 메모리에서 값을 읽어온다.


== 1) 최적화 장벽이 없음 ==

최적화 장벽이 없으면 모두 최적화되버림

{{{
  6     int vola;
  7
  8 int main(void)
  9 {
 10
 11     vola = 5678;
 12     printf("step1..");
 13     while (vola != 10000) {
 14         vola++;
 15     }
 16
 17     vola++;
 18
 19     while (vola != 20000) {
 20         vola++;
 21     }
 22
 23     printf("step2..");
 24
 25     return 0;
 26 }
}}}

{{{
        .file   "a.c"
        .section        .rodata.str1.1,"aMS",@progbits,1
.LC0:
        .string "step1.."
.LC1:
        .string "step2.."
        .text
        .p2align 4,,15
.globl main
        .type   main, @function
main:
        leal    4(%esp), %ecx
        andl    $-16, %esp
        pushl   -4(%ecx)
        pushl   %ebp
        movl    %esp, %ebp
        pushl   %ecx
        subl    $4, %esp
        movl    $5678, vola
        movl    $.LC0, (%esp)
        call    printf
        cmpl    $10000, vola
        je      .L2
        movl    $10000, vola    -> 루프 최적화
.L2:
        movl    $20000, vola    -> 루프 최적화
        movl    $.LC1, (%esp)
        call    printf
        addl    $4, %esp
        xorl    %eax, %eax
        popl    %ecx
        popl    %ebp
        leal    -4(%ecx), %esp
        ret
        .size   main, .-main
        .comm   vola,4,4
        .ident  "GCC: (GNU) 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)"
        .section        .note.GNU-stack,"",@progbits
}}}




2) 최적화 장벽이 있음

최적화 장벽이 있으면 모든 값을 메모리에 일일이 기록함.



{{{
  6     int vola;
  7
  8 int main(void)
  9 {
 10
 11     vola = 5678;
 12     printf("step1..");
 13     while (vola != 10000) {
 14         vola++;
 15         asm volatile ("" ::: "memory");   -> vola 값의 쓰기
 16     }
 17
 18     vola++;
 19     asm volatile ("" ::: "memory");
 20
 21     while (vola != 20000) {
 22         vola++;
 23         asm volatile ("" ::: "memory");
 24     }
 25
 26     printf("step2..");
 27
 28     return 0;
 29 }
}}}

{{{
        .file   "a.c"
        .section        .rodata.str1.1,"aMS",@progbits,1
.LC0:
        .string "step1.."
.LC1:
        .string "step2.."
        .text
        .p2align 4,,15
.globl main
        .type   main, @function
main:
        leal    4(%esp), %ecx
        andl    $-16, %esp
        pushl   -4(%ecx)
        pushl   %ebp
        movl    %esp, %ebp
        pushl   %ecx
        subl    $4, %esp
        movl    $5678, vola
        movl    $.LC0, (%esp)
        call    printf
        movl    vola, %eax
        cmpl    $10000, %eax
        je      .L2
        .p2align 4,,7
.L7:
        addl    $1, %eax       -> 루프 최적화 제거!!
        movl    %eax, vola    -> 메모리에 값을 쓴다!!

----------> 여기에 최적화 장벽이 있는 것

        movl    vola, %eax    -> 장벽 뒤에서는 메모리를 다시 읽기
        cmpl    $10000, %eax
        jne     .L7
.L2:
        movl    $10001, vola
        movl    vola, %eax
        cmpl    $20000, %eax
        je      .L4
        .p2align 4,,7
.L8:
        addl    $1, %eax     -> 루프 최적화 제거!!
        movl    %eax, vola  -> 메모리에 값을 쓴다!!

----------> 여기에 최적화 장벽이 있는 것

        movl    vola, %eax
        cmpl    $20000, %eax
        jne     .L8
.L4:
        movl    $.LC1, (%esp)
        call    printf
        addl    $4, %esp
        xorl    %eax, %eax
        popl    %ecx
        popl    %ebp
        leal    -4(%ecx), %esp
        ret
        .size   main, .-main
        .comm   vola,4,4
        .ident  "GCC: (GNU) 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)"
        .section        .note.GNU-stack,"",@progbits
}}}




